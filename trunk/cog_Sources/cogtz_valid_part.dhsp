;>xdiva
;*
;*		Objet : Zoom sur validation des commandes - paramètres liés aux articles
;*

;*
;*		Log	Version		N° modif		Date			Modifications
;*		--------------------------------------------------------------------------------------------------------------
;*		ROBL	kit104				01		07/2011		Version Initiale
;*

;*
;*		Procédures / Fonctions				Commentaires
;*		--------------------------------------------------------------------------------------------------------------
;*		Maj_Menu_Boutons						Mise à jour des boutons (grisés, cachés, ...)
;*		RechercherLibelle						Recherche des libellés complémentaires
;*

overwrittenby "coguz_valid_part.dhop"


;* déclarations communes
Include	"gttcz00.dhsp"

Module	"xzoom.dhop"
;Module	"a5pm000.dhop"
Module	"ccpmfic.dhop"
Module A5PMNoteJoint.dhop

HFileVersion   cogfdd.dhsd    Cog_fValid_Cde

;*
;	déclaration des fichiers et enregistrements
;*

public record	a5dd.dhsd	xz			a5xz		;communication zoom
public record	cogfdd.dhsd	Cog_Valid_PArt

public record	ccfdd.dhsd	c3
public record	ccfdd.dhsd	c5

1	nbsel							4,0					; Nombre de lignes sélectionnées

1	axe	>	cogfdd.dhsd		axe
1	cptv	>	cogfdd.dhsd		cptv


;*
;	procedures complémentaires
;*

;*	Mise à jour des boutons (affichage, grisés, ...)
Public Procedure Maj_Menu_Boutons
; met à jour le menu et les boutons
BeginP

	Switch ZOOM.ACTION

		Case Vsw In (ZOOM_CREATION, ZOOM_DUPLICATION)
			XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)
			XmeMenuEnableItem(Zoom.Idmenu,"JOINT",True)
			
			XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", "<BITMAP>NOTE_N")
			XmeToolbarEnableButton(idOutilZoom,"NOTE",True)
			XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", "<BITMAP>FICJOINT_N")
			XmeToolbarEnableButton(idOutilZoom,"JOINT",True)
	
			XmeToolbarEnableButton(idOutilZoom,"Cog_valideurs",False)
	
		Case ZOOM_MODIFICATION
			; en modification
			XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)
			XmeMenuEnableItem(Zoom.Idmenu,"JOINT",True)
	
			XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(Cog_Valid_PArt.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
			XmeToolbarEnableButton(idOutilZoom,"NOTE",True)
			XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", Condition(Cog_Valid_PArt.CEJOINT = 2, "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))
			XmeToolbarEnableButton(idOutilZoom,"JOINT",True)
	
			XmeToolbarEnableButton(idOutilZoom,"Cog_valideurs",False)
	
		Case 	ZOOM_AFFICHAGE
			switch Zoom.TypeInput
	
				case ZOOM_S_DEPART		; avant saisie de la clé de départ
					XmeToolbarEnableButton(idOutilZoom,"Cog_valideurs",False)
	
				case ZOOM_S_CONSULT		; avant consultation fiche ou liste
					XmeMenuEnableItem(Zoom.Idmenu,"NOTE",Condition(Cog_Valid_PArt.CENOTE = 2, True, False))
					XmeMenuEnableItem(Zoom.Idmenu,"JOINT",Condition(Cog_Valid_PArt.CEJOINT = 2, True, False))
					XmeToolbarEnableButton(idOutilZoom,"Cog_valideurs",True)
		
			endswitch
	
			XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(Cog_Valid_PArt.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
			xmetoolbarenablebutton(idOutilZoom,"NOTE", Condition(Cog_Valid_PArt.CENOTE = 2, True, False))
	
			XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", Condition(Cog_Valid_PArt.CEJOINT = 2, "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))
			xmetoolbarenablebutton(idOutilZoom,"JOINT", Condition(Cog_Valid_PArt.CEJOINT = 2, True, False))

	EndSwitch

EndP

;*	Recherches complémentaires
public procedure RechercherLibelle
beginp

	init	g7.Lib()	= ""

	if Seek_C5(1,Cog_Valid_PArt.Axe) = 0
		g7.Lib(1)	= c5.Lib
	endif

	if Seek_C3(Cog_Valid_PArt.CptV) = 0
		g7.Lib(2)	= c3.Lib
	endif

endp

;*
public procedure Traiter_Selection
beginp	; Traiter_Selection

	nbsel ++
	Pong("Cog_Valid_PArt_" & nbsel,Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV)

endp		; Traiter_Selection


;*
public procedure Envoyer_Selections
beginp	; Envoyer_Selections

	nbsel	= 0
	ZoomTraiterSelection("cogtz_valid_part.dhop","Traiter_Selection")			
	Pong("Cog_Valid_PArt_nbre",nbsel)

endp		; Envoyer_Selections

;*	envoie l'élément courant si il n'y a pas eu de sélection multiple précédemment
public procedure Envoyer_Courant
beginp

	if nbsel = 0

		nbsel	= 1
		Pong("Cog_Valid_PArt_" & nbsel,Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV)
		Pong("Cog_Valid_PArt_nbre",nbsel)
	
	endif

endp


;*
;	procedures d'initialisation et fin de zoom
;*

;*
public procedure ZoomDebut
beginp

	init_zoom(FicheNoBloc = 0)

	seek_soc(mz.dos)			; recherche du dossier et t000
	Seek_CA(mz.Dos)
	Zoom.TitreFixe	= Translate("Validation des Commandes Fournisseur - Paramètres liés aux articles")&" - " & Soc.Nom 

	note_Debut 				; init de la gestion des notes
	joint_Debut				; init de la gestion des fichiers joints
	
	; sauvegarde du mode d'appel
	g7.pong		= g3xz.pong
	g3xz.pong 	= false

endp

;*
public procedure ZoomAbandon		; sortie du zoom par f9
beginp
endp

;*
public procedure ZoomVAlidation ; validation du zoom
beginp

	zoom.valretour	= Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV
	if g7.pong = true
		Envoyer_Courant
	endif

endp

;*
public procedure ZoomFin			; à la sortie du zoom
beginp
endp


;*
;	procedures création, duplication, modification et suppression
;*

;*
public procedure ZoomCreation
beginp

	Cog_Valid_PArt	= ""
	init g7.Lib()	= ""

	axe				= ""
	cptv				= ""

endp

;*
public procedure ZoomDuplication
beginp

	Cog_Valid_PArt.usermodh		= ""
	Cog_Valid_PArt.usermo		= ""
	Cog_Valid_PArt.cenote		= 1
	Cog_Valid_PArt.note			= 0
	Cog_Valid_PArt.cejoint		= 1
	Cog_Valid_PArt.joint			= 0

	axe								= Cog_Valid_PArt.Axe
	cptv								= Cog_Valid_PArt.CptV

endp

;*
public procedure ZoomApresCleCreation ; après saisie de la clé
beginp

   zoom.cle			= "A" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV
   zoom.res			= "g3Cog_Valid_PArt" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV

endp

;*
public procedure ZoomCreationRes		; apres réservation en création
beginp

	note_chargement_(0,0)
	joint_chargement_(0,0)

endp

;*
public procedure ZoomAvantWrite
beginp

   Cog_Valid_PArt.Ce1			= "A"
   Cog_Valid_PArt.dos			= mz.dos
	Cog_Valid_PArt.usercr 		= system.user
	Cog_Valid_PArt.usercrdh 	= time(7)
	Cog_Valid_PArt.note 			= note_creation_(0,noteobj="Cog_Valid_PArt")
	Cog_Valid_PArt.joint 		= joint_creation_(0,"Cog_Valid_PArt")
	Cog_Valid_PArt.cenote		= condition(Cog_Valid_PArt.note<>0,2,1)
	Cog_Valid_PArt.cejoint		= condition(Cog_Valid_PArt.joint<>0,2,1)

endp


;*
public procedure ZoomApresCreation ; compte-rendu de création
hfile		cogfdd.dhsd		cog_fvalid_cde		cog_fvalid_cde_loc
record	cogfdd.dhsd		cog_valid_pmt		cog_valid_pmt_loc

beginp

	if zoom.Ok = "O" and  (axe <> "" or cptv <> "")

		cog_fvalid_cde_loc.Key	= "M" & mz.dos & axe & cptv
		loop not hread(cog_fvalid_cde_loc,cog_valid_pmt_loc) and cog_fvalid_cde_loc.Key <= "M" & mz.dos & axe & cptv & $FF
			cog_valid_pmt_loc.Axe	= Cog_Valid_PArt.Axe
			cog_valid_pmt_loc.CptV	= Cog_Valid_PArt.CptV
			hwrite(cog_fvalid_cde_loc,cog_valid_pmt_loc)
		endloop

	endif

endp


;*
public procedure ZoomModification ; avant entrée en modif
beginp

   zoom.res			= "g3Cog_Valid_PArt" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV

endp


;*
public procedure ZoomModificationRes		; apres réservation enmodif
beginp

	note_chargement_ (0,Cog_Valid_PArt.note)
	joint_chargement_(0,Cog_Valid_PArt.joint)

endp


;*
public procedure ZoomAvantRewrite
beginp

	Cog_Valid_PArt.usermo		= system.user
   Cog_Valid_PArt.usermodh		= time(7)
	Cog_Valid_PArt.note 			= note_modification_(0,Cog_Valid_PArt.note,noteobj="Cog_Valid_PArt")
	Cog_Valid_PArt.joint 		= joint_modification_(0,Cog_Valid_PArt.joint,"Cog_Valid_PArt")
	Cog_Valid_PArt.cenote		= condition(Cog_Valid_PArt.note<>0,2,1)
	Cog_Valid_PArt.cejoint		= condition(Cog_Valid_PArt.joint<>0,2,1)

endp


;*
public procedure ZoomApresModification ; compte rendu de modification
beginp
endp


;*
public procedure ZoomSuppression ; avant entrée en suppression
beginp

   zoom.res			= "g3Cog_Valid_PArt" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV

endp


;*
public procedure ZoomSuppressionRes
beginp
endp


;*
public procedure ZoomAvantDelete
beginp

	note_suppression_ (0,Cog_Valid_PArt.note)
	joint_suppression_ (0,Cog_Valid_PArt.joint)

endp

;*
public procedure ZoomApresSuppression ; compte rendu de suppression
hfile		cogfdd.dhsd		cog_fvalid_cde		cog_fvalid_cde_loc
record	cogfdd.dhsd		cog_valid_pmt		cog_valid_pmt_loc

beginp

	if zoom.Ok = "O"

		cog_fvalid_cde_loc.Key	= "M" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV
		loop not hread(cog_fvalid_cde_loc,cog_valid_pmt_loc) and cog_fvalid_cde_loc.Key <= "M" & mz.dos & Cog_Valid_PArt.Axe & Cog_Valid_PArt.CptV & $FF
			hdelete(cog_fvalid_cde_loc,cog_valid_pmt_loc)
		endloop

	endif

endp


;*
;	Actions
;*

;*
public procedure ZoomEnteteTableau 
beginp

	XmeList_ScanColumn(Zoom.IdTableau)

endp

;*
public procedure ZoomAvantConsultFiche
beginp

	Maj_Menu_Boutons

endp	


;*
public procedure ZoomAvantConsultListe
beginp

	Maj_Menu_Boutons

endp


;*
public procedure ZoomConsultFiche 	; à utiliser si note
beginp

	switch Harmony.Key

		case k_f7
			zoom_call()
		
		case k_sf6
			note_consultation_(0,Cog_Valid_PArt.note)
		
		case k_ctrl_f6
			joint_consultation_(0,Cog_Valid_PArt.joint)

		case harmony.Dataarret = 1000	;zoom des valideurs
			if Cog_Valid_PArt <> ""
				ping("zechange",mz)
				ping("zoompar","")
				ping("Cog_Valid_PArt",Cog_Valid_PArt)
				zoom_call(63301,false)
			endif
				
	endswitch 

endp

;*
public procedure ZoomConsultListe ; à utiliser si note
beginp

	switch Harmony.Key

		case k_f7
			zoom_call()
		
		case k_sf6
			note_consultation_(0,Cog_Valid_PArt.note)
		
		case k_ctrl_f6
			joint_consultation_(0,Cog_Valid_PArt.joint)
	
		case k_f12
			if g7.pong = true
				Envoyer_Selections
			endif
	
		case harmony.Dataarret = 1000	;zoom des valideurs
			if Cog_Valid_PArt <> ""
				ping("zechange",mz)
				ping("zoompar","")
				ping("Cog_Valid_PArt",Cog_Valid_PArt)
				zoom_call(63301,false)
			endif
				
	endswitch 

endp


;*
public procedure ZoomAvantInput			; permet de griser les boutons et les choix
beginp

	Maj_Menu_Boutons

endp

;*
public procedure ZoomArret					; exécutée si point d'arrêt en mode fiche ou liste
beginp											; pour appel d'un zoom

	switch Harmony.Key

	case K_SF6											; Saisie d'une note
		Note_Saisie_(C_Applic_DAV, Cog_Valid_PArt.Note, 'COG_VALID_PART')
		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(Not Note_Empty_(C_Applic_DAV), "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))

	case K_Ctrl_F6
		Joint_Saisie_ (C_Applic_DAV, Cog_Valid_PArt.Joint, 'COG_VALID_PART')		; Fichier joint
		XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", Condition(Not Joint_Empty_(C_Applic_DAV), "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))

	case Harmony.DataArret = 8002
		if Harmony.Sourisbout = Right_Button
			Zoom_Call()
		elsif Harmony.Sourisclic = Double_Click
			Harmony.Retour = Xmenext_Simulation_Touche
			Harmony.Cplretour = K_F8
		endif

	case K_F7
		Zoom_Call()

	case K_F8 or Harmony.Arret in (9000..9999,11000..65000)				; Appel de zoom
		ping ("A5xz" , A5xz)
		Zoom_Call(harmony.arret)

	endswitch

endp

;*
public procedure ZoomFiltreAvantValeur
beginp
endp

;*
public procedure ZoomFiltreApresValeur
beginp
endp


;*
;	procedures liées à la lecture du ficher
;*


;* génération de la clé sur
public procedure ZoomApresCle1
beginp

	zoom.cle 	= "A" & mz.Dos & Cog_Valid_PArt.Axe
	zoom.clemin = "A" & mz.Dos
	zoom.clemax = "A" & mz.Dos & $FF

endp

;* après lecture clé sur 
public procedure ZoomApresRead1
beginp

	RechercherLibelle

endp

;* génération de la clé sur
public procedure ZoomApresCle2
beginp

	zoom.cle 	= "B" & mz.Dos & Cog_Valid_PArt.CptV
	zoom.clemin = "B" & mz.Dos
	zoom.clemax = "B" & mz.Dos & $FF

endp

;* après lecture clé sur 
public procedure ZoomApresRead2
beginp

	RechercherLibelle

endp


;*
;*   Séquences de gestion de fichier
;*


;*


