SetModuleInfo('$Id: cogtz_t002.dhsp 8256 2015-06-30 08:28:37Z admin $')
;*
;*      Zoom sur les taux financiers COG_T002
;*

;*
;*		Log	Version		N° modif		Date			Modifications
;*		--------------------------------------------------------------------------------------------------------------
;*		YLEF	 P205A						01/2015		Version initiale
;*

;*
;*	 Déclarations
;*

OverWrittenBy "coguz_t002.dhop"

;
Include "GTTCZ00.dhsp"					; Déclarations communes

;
Module	"A5PMNoteJoint.dhop"
Module 	"XZoom7.dhop"
Module	"CogTm_MoteurPrjSpec.dhop"

; TDF
HFileVersion 	GTFDD.dhsd GTFTAB

; Record Sql 
Public recordSQL "cogrs_tab.dhoq" TableParametre					; Table paramètres
Public recordSQL "cogrs_tab.dhoq" CogRs_TauxFi						; Table Taux financiers
Public recordSQL "cogrs_tab.dhoq" CogRs_TauxFi		Rs_TauxFi_Old	

Public Record	cogfdd.dhsd		Cog_T000								; Table paramètres
Public Record	cogfdd.dhsd		COG_T002		COG_T002_Sel		; Table  pour sélection

; Variables
1	CeBin		> GTFDD.dhsd	CeBin			; CE binaire
1	Dos		> GTFDD.dhsd	Dos			; Dossier
1	nbsel							4,0			; Nombre de lignes sélectionnées

;*
;* procedures 
;*

;*	Mise à jour des boutons (affichage, grisés, ...)
Public Procedure Maj_Menu_Boutons
; met à jour le menu et les boutons
BeginP

	Switch ZOOM.ACTION

	Case Vsw In (ZOOM_CREATION, ZOOM_DUPLICATION)
		XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)
		XmeMenuEnableItem(Zoom.Idmenu,"JOINT",True)
		
		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", "<BITMAP>NOTE_N")
		XmeToolbarEnableButton(idOutilZoom,"NOTE",True)
		XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", "<BITMAP>FICJOINT_N")
		XmeToolbarEnableButton(idOutilZoom,"JOINT",True)

	Case ZOOM_MODIFICATION
		; en modification
		XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)
		XmeMenuEnableItem(Zoom.Idmenu,"JOINT",True)

		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(CogRs_TauxFi.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		XmeToolbarEnableButton(idOutilZoom,"NOTE",True)
		XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", Condition(CogRs_TauxFi.CEJOINT = 2, "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))
		XmeToolbarEnableButton(idOutilZoom,"JOINT",True)


	Case 	ZOOM_AFFICHAGE
		switch Zoom.TypeInput

		case ZOOM_S_CONSULT		; avant consultation fiche ou liste
			XmeMenuEnableItem(Zoom.Idmenu,"NOTE",Condition(CogRs_TauxFi.CENOTE = 2, True, False))
			XmeMenuEnableItem(Zoom.Idmenu,"JOINT",Condition(CogRs_TauxFi.CEJOINT = 2, True, False))

		endswitch

		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(CogRs_TauxFi.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		xmetoolbarenablebutton(idOutilZoom,"NOTE", Condition(CogRs_TauxFi.CENOTE = 2, True, False))

		XmeToolBarSetButtonInfo(idOutilZoom, "JOINT", Condition(CogRs_TauxFi.CEJOINT = 2, "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))
		xmetoolbarenablebutton(idOutilZoom,"JOINT", Condition(CogRs_TauxFi.CEJOINT = 2, True, False))

	EndSwitch

EndP

;*	Recherches complémentaires
public procedure RechercherLibelle
beginp

endp

;*
public procedure Traiter_Selection
beginp	; Traiter_Selection

	nbsel ++
	Pong("CogRs_TauxFi_" & nbsel, CogRs_TauxFi.Cog_TauxDt)

endp		; Traiter_Selection


;*
public procedure Envoyer_Selections
beginp	; Envoyer_Selections

	nbsel	= 0
	ZoomTraiterSelection("cogtz_COG_T002.dhop","Traiter_Selection")			
	Pong("CogRs_TauxFi_nbre",nbsel)

endp		; Envoyer_Selections

;*	envoie l'élément courant si il n'y a pas eu de sélection multiple précédemment
public procedure Envoyer_Courant
beginp

	if nbsel = 0

		nbsel	= 1
		Pong("CogRs_TauxFi_" & nbsel,CogRs_TauxFi.Cog_TauxDt)
		Pong("CogRs_TauxFi_nbre",nbsel)
	
	endif

endp

;*
;* procedures d'initialisation et fin de zoom
;*

;*
Public Procedure ZoomEnteteTableau 
Beginp
	XmeList_ScanColumn(Zoom.IdTableau)
Endp

;*
Public Procedure Construire_Condition_Selection(nom, premier)
1	Nom					A
1	premier				1,0 = FALSE

1 	Valeur_Condition	S
1  Param					S

Beginp
	CogRs_TauxFi.where.RemoveCondition(Nom)

																						 	
	if COG_T002_Sel.Lib <> ' '
		Param = banaliser_condition(COG_T002_Sel.Lib, premier)
		CogRs_TauxFi.where.Like_Lib(Param)
		Ajouter_condition(Valeur_Condition,'Like_Lib')
	endif
																						 	
	if Valeur_Condition <> ' '
		CogRs_TauxFi.where.AddCondition(Nom, Valeur_Condition)
	endif
Endp

;*
Public Procedure ZoomDebut 
;
Beginp

	Init_Zoom(FicheNoBloc = 0)
	Seek_Soc(MZ.Dos)			; recherche du dossier et T000

	;recherche du cog_t000
	TableParametre.init()
	TableParametre.where.Zoom_PK()
	if TableParametre.select() = 0
		messagebox("Table paramètres inaccessible","Alerte",mb_iconexclamation)
		programexit
	endif
	
	cebin	= 2

	if cog_t000.tabtyp(cebin) = 2
		dos = 999
		zoom.titrefixe=Translate("Titre") & " - " & Translate("Table commune")
	else
		dos = mz.dos
		zoom.titrefixe=Translate("Titre") & " - " & Left(Soc.nom)
	endif

	Note_Debut 				;Init de la gestion des notes
	Joint_Debut																; init de la gestion des fichiers joints

	COG_T002_Sel	= " "
	CogRs_TauxFi.Orderby.Par_Date()
	
	Construire_Condition_Selection(ZOOM_SQL_CONDITION_NORMALE, TRUE)

	; sauvegarde du mode d'appel
	g7.pong		= g3xz.pong
	g3xz.pong 	= false

Endp

;*
Public Procedure ZoomAbandon		; sortie du zoom par f9
Beginp
Endp

;*
Public Procedure ZoomVAlidation ; validation du zoom
Beginp

	zoom.valretour	= CogRs_TauxFi.Cog_TauxDt
	if g7.pong = true
		Envoyer_Courant
	endif

Endp

;*
Public Procedure ZoomFin			
; à la sortie du zoom
Beginp
Endp					

;*
;* procedures création, duplication, modification et suppression
;*

;*
Public Procedure ZoomCreation
;
Beginp
	; initialiser les données 
	CogRs_TauxFi.init()
	Zoom.Modelf 		= ZOOM_MODE_FICHE		; pour interdire la création en mode liste
Endp	  

;*
Public Procedure ZoomDuplication 
;
Beginp
	CogRs_TauxFi.UserMoDh 	= ' '
	CogRs_TauxFi.UserCrDh 	= ' '
	CogRs_TauxFi.Note 		= 0
	CogRs_TauxFi.CeNote 		= 1	
	CogRs_TauxFi.Joint 		= 0
	CogRs_TauxFi.CeJoint		= 1	
Endp

;*
Public Procedure ZoomApresCleCreation 
; après saisie de la clé 
Beginp
	CogRs_TauxFi.Where.Exists(CogRs_TauxFi.Cog_TauxDt)
	Zoom.Res			= [ 'COGTB' Dos CeBin CogRs_TauxFi.Cog_TauxDt ]
	Zoom.Titrevar	= CogRs_TauxFi.Cog_TauxDt 
Endp

;*
Public Procedure ZoomCreationRes		; apres réservation en création 
Beginp
	Note_Reinit(C_Applic_DAV)
	Joint_ReInit(C_Applic_DAV)
Endp

;*
Public Procedure ZoomAvantWrite 
Beginp
	; initialisation des codes enregistrement et mise à jour date et user
   CogRs_TauxFi.Dos 			= Dos
   CogRs_TauxFi.TabNo 		= CeBin
	CogRs_TauxFi.CeBin 		= CeBin
	CogRs_TauxFi.UserCr 		= SYSTEM.User
	CogRs_TauxFi.UserCrDh 	= Time(7)
	CogRs_TauxFi.Note 		= Note_Creation_(C_Applic_DAV, 'COG_T002')	
	CogRs_TauxFi.CeNote		= Condition(CogRs_TauxFi.Note = 0, 1, 2)
	CogRs_TauxFi.Joint 		= Joint_Creation_(C_Applic_DAV, 'COG_T002')	
	CogRs_TauxFi.CeJoint		= Condition(CogRs_TauxFi.Joint = 0, 1, 2)
Endp

;*
Public Procedure ZoomApresCreation 
; compte-rendu de création
Beginp
	Zoom.Titrevar = [ CogRs_TauxFi.Cog_TauxDt *1 CogRs_TauxFi.Lib ]

	; impact sur UT126
	If Zoom.Ok = 'O'
		If Cog_UT126_Update_FraisFi(CogRs_TauxFi)	<> 0
			MessageBox("Erreur au recalcul des frais non immo des fiches UT126.|Vérifiez le livre de bord.","Erreur", MB_ICONERROR)
		EndIf
	EndIf

Endp				 

;*
Public Procedure ZoomModification 
; avant entrée en modif
Beginp
	Zoom.Res			= [ 'COGTB' Dos CeBin CogRs_TauxFi.Cog_TauxDt ]
Endp			  

;*
Public Procedure ZoomModificationRes		
; apres réservation enmodif
Beginp
	Note_Chargement_(C_Applic_DAV, CogRs_TauxFi.Note)
	Joint_Chargement_(C_Applic_DAV, CogRs_TauxFi.Note)
Endp					

;*
Public Procedure ZoomAvantRewrite 
;
Beginp
   CogRs_TauxFi.UserMo		= SYSTEM.User
   CogRs_TauxFi.UserMoDh 	= Time(7)
	CogRs_TauxFi.Note 		= Note_Modification_ (C_Applic_DAV, CogRs_TauxFi.Note, 'COG_T002')
	CogRs_TauxFi.CeNote		= Condition(CogRs_TauxFi.Note = 0, 1, 2)
	CogRs_TauxFi.Joint 		= Joint_Modification_ (C_Applic_DAV, CogRs_TauxFi.Joint, 'COG_T002')
	CogRs_TauxFi.CeJoint		= Condition(CogRs_TauxFi.Joint = 0, 1, 2)

	;	récupération de l'ancien taux
	Rs_TauxFi_Old.Init()
	Rs_TauxFi_Old.Where.PK(CogRs_TauxFi.Cog_TauxDt)
	Rs_TauxFi_Old.Select()

Endp														 

;*
Public Procedure ZoomApresModification 
; compte rendu de modification
Beginp
	Zoom.Titrevar = [ CogRs_TauxFi.Cog_TauxDt *1 CogRs_TauxFi.Lib ]

	; impact sur UT126
	If Zoom.Ok = 'O' AND CogRs_TauxFi.Cog_Taux <> Rs_TauxFi_Old.Cog_Taux
		If Cog_UT126_Update_FraisFi(CogRs_TauxFi)	<> 0
			MessageBox("Erreur au recalcul des frais non immo des fiches UT126.|Vérifiez le livre de bord.","Erreur", MB_ICONERROR)
		EndIf
	EndIf

Endp				 

;*
Public Procedure ZoomSuppression 
; avant entrée en suppression
Beginp
	Zoom.Res			= [ 'COGTB' Dos CeBin CogRs_TauxFi.Cog_TauxDt ]
Endp													  

;*
Public Procedure ZoomSuppressionRes
;
Beginp
Endp
														  
;*
Public Procedure ZoomAvantDelete 
;
Beginp
	Note_Suppression_(C_Applic_DAV, CogRs_TauxFi.Note)
	Joint_Suppression_(C_Applic_DAV, CogRs_TauxFi.Joint)
Endp

;*
Public Procedure ZoomApresSuppression 
; compte rendu de suppression
Beginp
Endp						

;*
;* Actions
;*

;*
Public Procedure ZoomAvantConsult
Beginp
	Maj_Menu_Boutons
Endp				  

;*
Public Procedure ZoomConsult 
; à utiliser si note
Beginp
	Switch Harmony.Key
		Case K_F7		|	Zoom_Call()
		Case K_SF6		|	Note_Consultation_ (C_Applic_DAV, CogRs_TauxFi.Note)
		Case K_CTRL_F6	|	Joint_Consultation_	(C_Applic_DAV, CogRs_TauxFi.Joint)
		case K_F12
			if G7.PONG = True
				Envoyer_Selections
			endif
	Endswitch 
Endp

;*
Public Procedure ZoomAvantInput			
; permet de griser les boutons et les choix
Beginp
	Maj_Menu_Boutons
Endp

;*
Public Procedure ZoomArret					
; exécutée si point d'arrêt en mode fiche ou liste
Beginp											; pour appel d'un zoom 
	Switch Harmony.Key
	Case K_F7	|	Zoom_Call()
	Case K_F8	|	Zoom_Call(Harmony.Arret)	; Appel de zoom
	
	Case K_SF6						; Saisie d'une note
		Note_Saisie_(C_Applic_DAV, CogRs_TauxFi.Note, 'COG_T002')				
		XmeToolbarSetButtonInfo(IdOutilZoom,"NOTE", Condition(Not Note_Empty_(C_Applic_DAV), "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		
	Case 	K_Ctrl_F6												; Fichier joint
		Joint_Saisie_(C_Applic_DAV, CogRs_TauxFi.Joint, 'COG_T002')
		XmeToolbarSetButtonInfo(IdOutilZoom, "JOINT", Condition(Not Joint_Empty_(C_Applic_DAV," "), "<BITMAP>FICJOINT"	,"<BITMAP>FICJOINT_N"))
	
	Case Harmony.Dataarret = 8002
		If Harmony.Sourisbout = RIGHT_BUTTON
			Zoom_Call()
		Endif

	Endswitch
Endp

;*
Public Procedure ZoomFiltreAvantValeur
Beginp
Endp

;*
Public Procedure ZoomFiltreApresValeur 
Beginp
Endp	

;*
;* procedures liées à la lecture du ficher
;*

;*
Public Procedure ZoomApresCle
Beginp
	Construire_Condition_Selection(ZOOM_SQL_CONDITION_NORMALE)
Endp															

;*
Public Procedure ZoomApresRead
Beginp
	Zoom.Titrevar = [ CogRs_TauxFi.Cog_TauxDt *1 CogRs_TauxFi.Lib ]
Endp															



