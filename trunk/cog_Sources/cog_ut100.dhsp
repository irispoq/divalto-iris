;*
;*    Modèle de traitement du générateur de ZOOM


module	"Xzoom.dhop"
;module	"A5PM000.dhop"
Module A5PMNoteJoint.dhop

Include "GTTCZ00.dhsp"						; Déclarations communes

hfileversion   cogfdd.dhsd    COGGTF_TAB

public hfile   cogfdd.dhsd    COGGTF_TAB	COGGTF_TAB		noopen

; Table pour la saisie de la clé de départ
public		record	cogfdd.dhsd	COG_UT100	COG_UT100_ZZDEP

; Table principale du zoom ( Taux de refacturation centrale )
public		record	cogfdd.dhsd	COG_UT100
public		record	gtfdd.dhsd	CLI
public		record	gtfdd.dhsd	ETS
public		record	cogfdd.dhsd	COG_UT103

1		Liste		L
1		AdrProc	16						

Define C_NOTE_NO = 0

include "CogGt_Controle_Fichier.dhsp"

;*
;* Procedures
;*

;*
Function Long Tri_DATE (&A ,&B)
; Tri la liste
Record	COGFDD.dhsd		COG_UT100		A						
Record	COGFDD.dhsd		COG_UT100		B	
1		Id_Dat1		20					
1		Id_Dat2		20					
BeginF				
	Id_Dat1 = A.Etb & A.Cog_Id_Refacturation & A.Cog_Dateffet																					
	Id_Dat2 = B.Etb & B.Cog_Id_Refacturation & B.Cog_Dateffet																					
	FReturn(SortCompare(Id_Dat1,Id_Dat2))
EndF																											

;*
Public Procedure MajTitreVar						; Met a jour les titres variables
BeginP
	ZOOM.TITREVAR = ' ' & COG_UT100.DOS & COG_UT100.ETB
EndP

;*
Procedure XgenZoomPreGarniCle(NumCle)						; Prégarni les champs de la clé à ne pas saisir
1			NumCle		N
BeginP
	COG_UT100.DOS = MZ.DOS
	COG_UT100.ETB = MZ.Etb
EndP

;*
;* Cherche le libellé dans la table liée (Toujours en mode Fiche et d'après paramétrage en mode Liste) 
;*

;*
Public Procedure	ChercheLibelleDansTableLiee
BeginP
	If Seek_Cli(Cog_UT100.Tiers) <> 0
		CLI.Nom = 'Inconnu !'
	Endif
	If Seek_Ets(Cog_UT100.Etb) <> 0
		ETS.Nom = 'Inconnu !'
	Endif
	If Cog_UT100.Cog_Id_Refacturation > system.esp And Hseek(Coggtf_Tab, Cog_UT103, [ 'D' Cog_UT100.DOS Cog_UT100.ETB Cog_UT100.Cog_Id_Refacturation ])  = 0
	Else
		Cog_UT103 = system.esp
	Endif
EndP

;*
;* Raffraichit le libellé de la table liée au retour du Zoom 
;*

;*
Public Procedure	GenZoomRefreshLibelle(Genzoom_Arret)
1			Genzoom_Arret		N
BeginP
	switch Genzoom_Arret
	EndSwitch
EndP

;*
Public Procedure     Maj_Menu_Boutons
; met à jour le menu et les boutons
BeginP
	Switch ZOOM.ACTION
	Case Vsw In (ZOOM_CREATION, ZOOM_DUPLICATION)

		XmeMenuEnableItem(Zoom.Idmenu,'NOTE',True)

		XmeToolBarSetButtonInfo(Zoom.idtoolbar, "NOTE", "<BITMAP>NOTE_N")
		xmetoolbarenablebutton(Zoom.idtoolbar,'NOTE',True)


	Case ZOOM_MODIFICATION
		
			; en modification
		XmeMenuEnableItem(Zoom.Idmenu,'NOTE',True)

		XmeToolBarSetButtonInfo(Zoom.idtoolbar, "NOTE", Condition(COG_UT100.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		xmetoolbarenablebutton(Zoom.idtoolbar,'NOTE',True)


	Case 	ZOOM_AFFICHAGE
		switch Zoom.TypeInput
	
		case ZOOM_S_CONSULT		; avant consultation fiche ou liste
			XmeMenuEnableItem(Zoom.Idmenu,'NOTE',Condition(COG_UT100.CENOTE = 2, True, False))

		endswitch

		XmeToolBarSetButtonInfo(Zoom.idtoolbar, "NOTE", Condition(COG_UT100.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		xmetoolbarenablebutton(Zoom.idtoolbar,'NOTE', Condition(COG_UT100.CENOTE = 2, True, False))

	EndSwitch
EndP

;*
;* Procedures d'initialisation et fin de zoom
;*

;*
Public Procedure ZoomDebut																					; Initialisation du zoom
BeginP																											; ZoomDebut
	Controle_Fichier
	Init_Zoom(FicheNoBloc=0)
	Seek_Soc(MZ.DOS)
	G7.Projet = G3XZ.Projet
	G3XZ.Projet = system.esp

	Note_Debut   				;init de la gestion des notes

	ZOOM.TITREFIXE = `UT100 - Taux de refacturation centrale`
EndP

;*
Public Procedure ZoomAbandon																				; Abandon du zoom
BeginP																											; ZoomAbandon
	
EndP																												; ZoomAbandon

;*
Public Procedure ZoomValidation																			; Validation du zoom
BeginP																											; ZoomValidation
	ZOOM.VALRETOUR =  COG_UT100.COG_TAUX
EndP

;*
Public Procedure ZoomFin																					; Traitements finaux du zoom
1		wetb			>gtfdd.dhsd	ETB
1		wdat			>gtfdd.dhsd	PIDT
1		wtau			>cogfdd.dhsd Cog_Id_Refacturation
1		wmnt			6,2
1		wnok			1	= ' '
1		Id_Date		20					
BeginP																											; ZoomFin
	COGGTF_TAB.Key = 'A' & MZ.Dos
	If Hread(COGGTF_TAB,COG_UT100) = 0 And COG_UT100.Dos = MZ.Dos
		Liste = ListCreate
		GetAdressFunction (' ' , "Tri_DATE" , AdrProc)
		ListMode (Liste, 1 , AdrProc)
		COGGTF_TAB.Key = 'A' & MZ.Dos
		Loop Hread(COGGTF_TAB,COG_UT100) = 0 And COG_UT100.Dos = MZ.Dos
			ListInsert(Liste,COG_UT100)
		EndLoop
		ListFirst(Liste,COG_UT100)
		wetb = COG_UT100.Etb 
		wdat = COG_UT100.Cog_Dateffet
		wtau = COG_UT100.Cog_Id_Refacturation
		ListBegin(Liste)
		Loop ListNext(Liste,COG_UT100) > 0
			If wetb = COG_UT100.Etb And wtau = COG_UT100.Cog_Id_Refacturation And wdat = COG_UT100.Cog_Dateffet
				wmnt += COG_UT100.Cog_Taux
			Else
				If Not wmnt = 100
					Messagebox("La somme des taux pour l'établissement " & wetb & wtau & formatd(" J0/M0/AAAA",wdat) & " n'est pas égale à 100%.",'Alerte',MB_OK+MB_ICONSTOP) | wnok = 'N'
				Endif
				wetb = COG_UT100.Etb 
				wmnt = COG_UT100.Cog_Taux
				wdat = COG_UT100.Cog_Dateffet
				wtau = COG_UT100.Cog_Id_Refacturation
			Endif
		EndLoop
		ListDestroy(Liste)
		If Not wmnt = 100
			Messagebox("La somme des taux pour l'établissement " & wetb & wtau & formatd(" J0/M0/AAAA",wdat) & " n'est pas égale à 100%.",'Alerte',MB_OK+MB_ICONSTOP) | wnok = 'N'
		Endif
		If wnok = 'N' | Zoom_Call(64000) | Endif
	Endif
EndP																												; ZoomFin

;*
;* Procedures création, duplication, modification et suppression
;*

;*
Public Procedure ZoomCreation																				; Traitements avant l'entrée en création
BeginP																											; ZoomCreation
	COG_UT100 = ' '
	XgenZoomPreGarniCle(1)
	COG_UT100.CE1 = '0'
	COG_UT100.Cog_Dateffet = Hdate(Today,"p")
	COG_UT100.Cog_Date_Fin = '99991201'
EndP

;*
Public Procedure ZoomDuplication																			; Traitements avant l'entrée en duplication
BeginP																											; ZoomDuplication
	COG_UT100.USERCR		= ' '
	COG_UT100.USERCRDH	= ' '
	COG_UT100.USERMO		= ' '
	COG_UT100.USERMODH	= ' '
	COG_UT100.NOTE			= 0
	COG_UT100.CENOTE		= 1
EndP

;*
Public Procedure ZoomApresCleCreation																	; Génération de la clé en création
BeginP																											; ZoomApresCleCreation
	ZOOM.CLE		= [ 'A' COG_UT100.DOS COG_UT100.ETB ]
	ZOOM.RES	= 'GIE' & COG_UT100.DOS & COG_UT100.ETB
	MajTitreVar
EndP

;*
Public Procedure ZoomCreationRes																			; Réservation d'entités complémentaires en création
BeginP																											; ZoomCreationRes
	Note_Chargement_  ( C_NOTE_NO  , 0 )	
EndP

;*
Public Procedure ZoomAvantWrite																			; Traitements avant écriture
BeginP																											; ZoomAvantWrite
	COG_UT100.NOTE		= Note_Creation_(C_NOTE_NO,NoteObj='COG_UT100')
	COG_UT100.CE1 = '0'
	COG_UT100.USERCR		= SYSTEM.USER
	COG_UT100.USERCRDH	= Time(7)
	if COG_UT100.NOTE <> 0
		COG_UT100.CENOTE = 2
	else
		COG_UT100.CENOTE = 1
	endif
EndP

;*
Public Procedure ZoomApresCreation																		; Compte-rendu de la création
BeginP																											; ZoomApresCreation
	MajTitreVar
EndP

;*
Public Procedure ZoomModification																		; Traitements avant l'entrée en modification
BeginP																											; ZoomModification
	ZOOM.RES	= 'GIE' & COG_UT100.DOS & COG_UT100.ETB
EndP

;*
Public Procedure ZoomModificationRes																	; Réservation d'entités complémentaires en modification
BeginP																											; ZoomModificationRes
		Note_Chargement_  (C_NOTE_NO ,  COG_UT100.NOTE )
EndP

;*
Public Procedure ZoomAvantRewrite																		; Traitements avant réécriture
BeginP																											; ZoomAvantRewrite
	COG_UT100.NOTE		= Note_Modification_(C_NOTE_NO, COG_UT100.Note, NoteObj='COG_UT100')
	COG_UT100.USERMO		= SYSTEM.USER
	COG_UT100.USERMODH		= Time(7)
	if COG_UT100.NOTE <> 0
		COG_UT100.CENOTE = 2
	else
		COG_UT100.CENOTE = 1
	endif
	MajTitreVar
EndP

;*
Public Procedure ZoomApresModification																	; Compte-rendu de la modification
BeginP																											; ZoomApresModification
	
EndP																												; ZoomApresModification

;*
Public Procedure ZoomSuppression																			; Traitements avant l'entrée en suppression
BeginP																											; ZoomSuppression
	ZOOM.RES	= 'GIE' & COG_UT100.DOS & COG_UT100.ETB
EndP

;*
Public Procedure ZoomSuppressionRes																		; Réservation d'entités complémentaires en suppression
BeginP																											; ZoomSuppressionRes
	
EndP																												; ZoomSuppressionRes

;*
Public Procedure ZoomAvantDelete																			; Traitements avant suppression
BeginP																											; ZoomAvantDelete
	Note_Suppression_  (C_NOTE_NO ,  COG_UT100.NOTE )
EndP

;*
Public Procedure ZoomApresSuppression																	; Compte-rendu de la suppression
BeginP																											; ZoomApresSuppression
	
EndP																												; ZoomApresSuppression

;*
;* Actions
;*

;*
Public Procedure ZoomAvantConsultFiche
BeginP																											; ZoomAvantConsultFiche
	Maj_Menu_Boutons
EndP

;*
Public Procedure ZoomAvantConsultListe
BeginP																											; ZoomAvantConsultListe
	Maj_Menu_Boutons
EndP

;*
Public Procedure ZoomConsultFiche																		; Traitement après consultation d'une fiche
BeginP																											; ZoomConsultFiche
		switch Harmony.Key
		case 	K_F7
			Zoom_Call()

		case 	K_SF6
			Note_Consultation_ (C_NOTE_NO , COG_UT100.NOTE )
		endswitch
EndP

;*
Public Procedure ZoomConsultListe																		; Traitement après consultation des fiches en mode liste
BeginP																											
		switch Harmony.Key
		case 	K_F7
			Zoom_Call()

		case 	K_SF6
			Note_Consultation_ (C_NOTE_NO , COG_UT100.NOTE )
		endswitch
EndP

;*
Public Procedure ZoomEnteteTableau
BeginP

EndP

;*
Public Procedure ZoomAvantInput																			; Traitement avant entrée clavier
BeginP																											
	Maj_Menu_Boutons
	If ZOOM.TYPEINPUT = ZOOM_S_DEPART
		XgenZoomPreGarniCle(Zoom.NoCle)
	endif
EndP

;*
public procedure ZoomArret					; exécutée si point d'arrêt en mode fiche ou liste
beginp

	;on ne fait pas l'affectation dans g3xz ici car incompatible avec gestion code adresse
												
	switch Harmony.Key
	case 	K_SF6												; Saisie d'une note
		Note_Saisie_(C_Applic_DAV, COG_ut100.Note, 'COG_UT100')
		XmeToolBarSetButtonInfo(Zoom.idtoolbar, "NOTE", Condition(Not Note_Empty_(C_Applic_DAV), "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
	
	case K_F7
		Zoom_Call()

	case 	Harmony.DataArret = 8002
		if Harmony.Sourisbout = Right_Button
			Zoom_Call()
		elsif Harmony.Sourisclic = Double_Click
			Harmony.Retour = Xmenext_Simulation_Touche
			Harmony.Cplretour = K_F8
		endif

;	case 	Harmony.DataArret in(9000..9999,11000..65000)				; Appel de zoom  en dernier
	case 	vsw = K_F8 or Harmony.DataArret in(9000..9999,11000..65000)				; Appel de zoom  en dernier
		Zoom_Call(harmony.arret)

	endswitch

EndP																												; ZoomArret

;*
Public Procedure ZoomFiltreAvantValeur																	; Traitement avant la saisie d'une valeur dans la grille des filtres
BeginP																											; ZoomFiltreAvantValeur
	
EndP																												; ZoomFiltreAvantValeur

;*
Public Procedure ZoomFiltreApresValeur																	; Traitement après la saisie d'une valeur dans la grille des filtres
BeginP																											; ZoomFiltreApresValeur
	
EndP																												; ZoomFiltreApresValeur

;*
;* Procedures liées à la lecture du fichier
;*

;*
;*
Public Procedure ZoomApresCle1					; Génération de la clé 1
BeginP													; ZoomApresCle1
	ZOOM.CLE			= [ 'A' MZ.DOS ]
	ZOOM.CLEMIN		= [ 'A' MZ.DOS ]
	ZOOM.CLEMAX		= [ 'A' MZ.DOS $FF ]
endp

;*
;*
Public Procedure ZoomApresRead					; Traitement général après lecture
BeginP													; ZoomApresRead
	MajTitreVar
	ChercheLibelleDansTableLiee
endp

;*
Public Procedure ZoomApresRead1					; Traitement après lecture clé 1
BeginP													; ZoomApresRead1
endp

;*
;* Procedures d'impression
;*

;*
Public Procedure ZoomDebutListe																			; Traitement avant l'impression
BeginP																											; ZoomDebutListe
	
EndP																												; ZoomDebutListe

;*
Public Procedure ZoomAvantDetail																			; Traitement avant l'impression d'un bloc détail en mode liste
BeginP																											; ZoomAvantDetail
	
EndP																												; ZoomAvantDetail

;*
Public Procedure ZoomApresDetail																			; Traitement après l'impression d'un bloc détail en mode liste
BeginP																											; ZoomApresDetail
	
EndP																												; ZoomApresDetail

;*
Public Procedure ZoomAvantBlocFin																		; Traitement avant l'impression du bloc de fin en mode liste
BeginP																											; ZoomAvantBlocFin
	
EndP																												; ZoomAvantBlocFin

;*
Public Procedure ZoomApresBlocFin																		; Traitement après l'impression du bloc de fin en mode liste
BeginP																											; ZoomApresBlocFin
	
EndP																												; ZoomApresBlocFin

;*
Public Procedure ZoomFinListe																				; Traitement après l'impression
BeginP																											; ZoomFinListe
	
EndP																												; ZoomFinListe

