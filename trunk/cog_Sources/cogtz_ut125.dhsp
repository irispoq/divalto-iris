SetModuleInfo('$Id: cogtz_ut125.dhsp 7937 2015-04-28 08:31:57Z admin $')
;*
;*      Zoom sur facturation projets spec
;*

OverWrittenBy "coguz_ut125.dhop"

;
Include 	"GTTCZ00.dhsp"					; Déclarations communes
Include	"COGTC_MOTEURPRJSPEC.DHSP"

;
Hfileversion   "cogfdd.dhsd"    COGGTF_TAB
public hfile   "cogfdd.dhsd"    COGGTF_TAB	COGGTF_TAB		noopen

;
Module	"A5PMNoteJoint.dhop"
Module 	"XZoom7.dhop"
Module 	"CCTM000.dhop"
Module	"CCPMFIC.dhop"
Module	"COGTM_MoteurPrjSpec.DHOP"

; Record Sql 
Public recordSQL  "cogrs_tab.dhoq"		TableParametre
Public recordSQL  "cogrs_uttab.dhoq"  	CogRs_UT125									; Table UT125
Public recordSQL  "cogrs_uttab.dhoq"  	cogrs_ut125		CogRs_UT125_Sel		; Table pour sélection
Public recordSQL	"cogrs_proj.dhoq"		CogRs_PrjComp

;
Public Record "gtfdd.dhsd" PRJAP
Public Record "gtfdd.dhsd" ART
Public Record "gtfdd.dhsd" T020
Public Record "gtfdd.dhsd" T036

; Variables
1	nbsel							4,0			; Nombre de lignes sélectionnées



;*
;* procedures 
;*

;*
Function int Cog_UT125_Controle_ART
; 0 --> OK
; Controle que NatProd est renseigné sur ART et que NatProd possède les informations pour facturation
; Si l'affaire remplit les conditions pour débuter la facturation, controle des dates obligatoires
1		wtxtErr		S
1		wErr			1,0
BeginF

	wErr = 0

	If ART.Ref <> CogRs_UT125.Ref
		Seek_ART(CogRs_UT125.Ref)
	EndIf
	If PRJAP.Affaire <> CogRs_UT125.Affaire
		Seek_PRJAP(CogRs_UT125.Affaire)
	ENdIf
	If CogRs_PrjComp.Dos <> PRJAP.Dos OR CogRs_PrjComp.Affaire <> PRJAP.Affaire
		CogRs_PrjComp.Init()
		CogRs_PrjComp.Where.RemoveCondition("")
		CogRs_PrjComp.Where.PK(PRJAP.Affaire)
		If CogRs_PrjComp.Select() = 0
			MessageBox("Erreur au chargement du complément affaire.", "Erreur", MB_ICONERROR)
			FReturn(1)	
		EndIf
	EndIf
	If T020.OP <> CogRs_UT125.Op
		Lectab(20, CogRs_UT125.Op)
	EndIf

	;	La nature de produit doit être renseignée
	If ART.ProdNat = ' ' OR Lectab(36, ART.ProdNat) <> 0	OR T036.Cog_MotFacTyp = 0
		MessageBox("Nature de produit incorrecte sur la fiche article", "Erreur", MB_ICONERROR)
		FReturn(1)
	EndIf

	If T036.Cog_MotFacTyp = C_PRODNAT_INFRA AND T036.Cog_DetailTyp not in (C_PRODNAT_MATOS, C_PRODNAT_LOG)
		MessageBox("Type de nature de produit INFRA sur la fiche article, complément MATERIEL ou LOGICIEL non précisé.", "Erreur", MB_ICONERROR)
		FReturn(1)
	EndIf

	; Suite des tests uniquement si la fiche affaire est au statut Actif
	If PRJAP.Cog_Prj_Status <> C_STATUT_PRJ_AFACTURER OR PRJAP.Cog_Facture <> 2
		FReturn(0)
	EndIf

	wtxtErr = "La facturation est activée sur la fiche affaire, vous devez renseigner ce(s) champs(s) pour créer ce type d'enregistrement sur la table UT125:"

	;*
	; NON IMMO
	;*

	;
	If	T020.Cog_MotPrjFlux = C_OP_NONIMMO AND CogRs_PrjComp.TravReelDDt = ' '
		wtxtErr &= "|Date de début des travaux réelle (nature NON IMMO)."
		wErr = 1
	EndIf

	;*
	; IMMO
	;*

	If T020.Cog_MotPrjFlux = C_OP_IMMO

		;
		If T036.Cog_MotFacTyp = C_PRODNAT_PROJET	
			
			If CogRs_PrjComp.ProjServReelDt = ' '
				wtxtErr &= "|Date de mise en service PROJET réelle (IMMO / PROJET)."
				wErr = 1
			EndIf

			If CogRs_PrjComp.PrestaBien = 0
				wtxtErr &= "|N° fiche de bien PRESTA (IMMO / PROJET)."
				wErr = 1
			EndIf

		EndIf

		;
		If T036.Cog_MotFacTyp = C_PRODNAT_INFRA	
			
			If CogRs_PrjComp.InfraServReelDt = ' '
				wtxtErr &= "|Date de mise en service INFRA réelle (IMMO / INFRA)."
				wErr = 1
			EndIf

			If T036.Cog_DetailTyp = C_PRODNAT_MATOS AND CogRs_PrjComp.InfraMatBien = 0
				wtxtErr &= "|N° fiche de bien (IMMO / INFRA MATERIEL)."
				wErr = 1
			EndIf

			IF T036.Cog_DetailTyp = C_PRODNAT_LOG AND CogRs_PrjComp.InfraLogBien	= 0
				wtxtErr &= "|N° fiche de bien (IMMO / INFRA LOGICIEL)."
				wErr = 1
			EndIf

		EndIf

	EndIf

	If wErr
		MessageBox(wtxtErr, "Erreur", MB_ICONERROR)
	EndIf

	FReturn(wErr)

EndF

;*
Function int Cog_UT125_Repartition_Autorisee
; FALSE --> non --> loyers restants = 0 ou loyers restants = loyers à facturer (facturation non débutée donc inutile de lancer nouvelle répartition)
; TRUE --> oui
BeginF

	If CogRs_UT125.Cog_LoyRestNb = 0 OR CogRs_UT125.Cog_LoyRestNb = CogRs_UT125.Cog_LoyNb
		FReturn(FALSE)
	EndIf

	FReturn(TRUE)
EndF

;*	Mise à jour des boutons (affichage, grisés, ...)
Public Procedure Maj_Menu_Boutons
; met à jour le menu et les boutons
BeginP

	xmetoolbarenablebutton(idOutilZoom,"cog_btnut126", False)
	XmeSetAttribut("cog_closed", AN_VISIBILITE, AV_CACHE)

	Switch ZOOM.ACTION

	Case Vsw In (ZOOM_CREATION, ZOOM_DUPLICATION)
		XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)
		
		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", "<BITMAP>NOTE_N")
		XmeToolbarEnableButton(idOutilZoom,"NOTE",True)

	Case ZOOM_MODIFICATION
		; en modification
		XmeMenuEnableItem(Zoom.Idmenu,"NOTE",True)

		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(cogrs_ut125.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		XmeToolbarEnableButton(idOutilZoom,"NOTE",True)

	Case 	ZOOM_AFFICHAGE
		switch Zoom.TypeInput

		case ZOOM_S_CONSULT		; avant consultation fiche ou liste
			XmeMenuEnableItem(Zoom.Idmenu,"NOTE",Condition(cogrs_ut125.CENOTE = 2, True, False))
			xmetoolbarenablebutton(idOutilZoom,"cog_btnrepart", Cog_UT125_Repartition_Autorisee)
			XmeSetAttribut("cog_closed", AN_VISIBILITE, Condition(cogrs_ut125.Cog_LoyFaNb > 0 AND cogrs_ut125.Cog_LoyRestNb = 0, AV_VISIBLE, AV_CACHE))

		endswitch

		XmeToolBarSetButtonInfo(idOutilZoom, "NOTE", Condition(cogrs_ut125.CENOTE = 2, "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		xmetoolbarenablebutton(idOutilZoom,"NOTE", Condition(cogrs_ut125.CENOTE = 2, True, False))
		xmetoolbarenablebutton(idOutilZoom,"cog_btnut126", Condition(cogrs_ut125.Ref <> ' ', True, False))

	EndSwitch

EndP

;*	Recherches complémentaires
public procedure RechercherLibelle
beginp

endp

;*
public procedure Traiter_Selection
beginp	; Traiter_Selection

	nbsel ++
	Pong("cogrs_ut125_" & nbsel,[ CogRs_UT125.Affaire CogRs_UT125.Ref])

endp		; Traiter_Selection


;*
public procedure Envoyer_Selections
beginp	; Envoyer_Selections

	nbsel	= 0
	ZoomTraiterSelection("cogtz_ut125.dhop","Traiter_Selection")			
	Pong("cogrs_ut125_nbre",nbsel)

endp		; Envoyer_Selections

;*	envoie l'élément courant si il n'y a pas eu de sélection multiple précédemment
public procedure Envoyer_Courant
beginp

	if nbsel = 0

		nbsel	= 1
		Pong("cogrs_ut125_" & nbsel, [ CogRs_UT125.Affaire CogRs_UT125.Ref])
		Pong("cogrs_ut125_nbre",nbsel)
	
	endif

endp

;*
;* procedures d'initialisation et fin de zoom
;*

;*
Public Procedure ZoomEnteteTableau 
Beginp
	XmeList_ScanColumn(Zoom.IdTableau)
Endp

;*
Public Procedure Construire_Condition_Selection(nom, premier)
1	Nom					A
1	premier				1,0 = FALSE

1 	Valeur_Condition	S
1  Param					S

Beginp
	cogrs_ut125.where.RemoveCondition(Nom)

	if cogrs_ut125_Sel.Affaire <> ' '
		Param = banaliser_condition(cogrs_ut125_Sel.Affaire, premier)
		cogrs_ut125.Where.Like_Affaire(Param)
		Ajouter_condition(Valeur_Condition,'Like_Affaire')
	endif

	if cogrs_ut125_Sel.Ref <> ' '
		Param = banaliser_condition(cogrs_ut125_Sel.Ref, premier)
		cogrs_ut125.Where.Like_Ref(Param)
		Ajouter_condition(Valeur_Condition,'Like_Ref')
	endif
																						 	
	if Valeur_Condition <> ' '
		cogrs_ut125.where.AddCondition(Nom, Valeur_Condition)
	endif
Endp

;*
Public Procedure ZoomDebut 
;
Beginp

	Init_Zoom(FicheNoBloc = 0)
	Seek_Soc(MZ.Dos)				; recherche du dossier et T000
	Seek_CA(mz.Dos)

	TableParametre.init()
	TableParametre.Select()

	XmeSetAttribut("cog_closed", AN_VISIBILITE, AV_CACHE)

	Note_Debut 						;Init de la gestion des notes

	cogrs_ut125_Sel.Init()
	cogrs_ut125.Orderby.Ordre_PK()
	
	If G3XZ.Projet <> ' '
		g7.ZoomPar= 'PILOTE'
		g7.projet = G3XZ.Projet
		cogrs_ut125_Sel.Affaire = g7.projet
		XmeSetAttribut('pilot', AN_VISIBILITE, AV_GRISE)
		Construire_Condition_Selection(ZOOM_SQL_CONDITION_PILOTEE, TRUE)
	Else
		g7.ZoomPar= 'NORMAL'
		g7.projet = ' '
		Construire_Condition_Selection(ZOOM_SQL_CONDITION_NORMALE, TRUE)
	EndIf

	; sauvegarde du mode d'appel
	g7.pong		= g3xz.pong
	g3xz.pong 	= false

Endp

;*
Public Procedure ZoomAbandon		; sortie du zoom par f9
Beginp
Endp

;*
Public Procedure ZoomVAlidation ; validation du zoom
Beginp

	zoom.valretour	= [ CogRs_UT125.Affaire CogRs_UT125.Ref]
	if g7.pong = true
		Envoyer_Courant
	endif

Endp

;*
Public Procedure ZoomFin			; à la sortie du zoom
Beginp
Endp					

;*
;* procedures création, duplication, modification et suppression
;*

;*
Public Procedure ZoomCreation
;
Beginp
	; initialiser les données 
	cogrs_ut125.init()
	CogRs_UT125.Cog_Period			= 1

	;	 Mode piloté
	If G7.ZoomPar = 'PILOTE' 
		cogrs_ut125.Affaire = G7.Projet 
		If Controle_Affaire(cogrs_ut125.Affaire,5000,,conf=false,niv=1) < 4
		 	cogrs_ut125.PRJLIB = PRJAP.Lib80
		Else
			MessageBox("Code affaire " & left(cogrs_ut125.Affaire) & " non autorisé.", "Alerte", MB_ICONERROR)
			Zoom.Ok = 'I'
		EndIf
	EndIf

	Zoom.Modelf 		= ZOOM_MODE_FICHE		; pour interdire la création en mode liste
Endp	  

;*
Public Procedure ZoomDuplication 
Beginp
	cogrs_ut125.UserMoDh 	= ' '
	cogrs_ut125.UserCrDh 	= ' '
	cogrs_ut125.Note 		= 0
	cogrs_ut125.CeNote 		= 1		
Endp

;*
Public Procedure ZoomApresCleCreation 
; après saisie de la clé 
Beginp

	If Cog_UT125_Controle_ART <> 0
		Zoom.Ok = 'I'
		PReturn
	EndIf

	CogRs_UT125.Cog_LgNo = Cog_UT125_Next_LgNo(CogRs_UT125.Affaire) 

	If CogRs_UT125.Cog_LgNo >=995
		MessageBox("Le nombre maximal de lignes est atteint pour cette affaire.", "Alerte", MB_ICONEXCLAMATION)
		Zoom.Ok = 'I'
	EndIf
	cogrs_ut125.Where.Exists(CogRs_UT125.Affaire , CogRs_UT125.Ref, CogRs_UT125.Cog_LgNo)
	Zoom.Res			= [ 'COG_UT125' mz.Dos CogRs_UT125.Affaire CogRs_UT125.Ref CogRs_UT125.Cog_LgNo]
	Zoom.Titrevar	= [CogRs_UT125.Affaire " - " CogRs_UT125.Ref]

	If Res_Affaire(cogrs_ut125.Affaire, 0)	<> 0
		MessageBox("Code affaire " & left(cogrs_ut125.Affaire) & " réservé, création impossible.", "Alerte", MB_ICONERROR)
		Zoom.Ok = 'I'
	EndIf

Endp

;*
Public Procedure ZoomCreationRes		; apres réservation en création 
Beginp
	Note_Reinit(C_Applic_DAV)
Endp

;*
Public Procedure ZoomAvantWrite 
Beginp

	; RESA COMMUNE
	If Cog_MoteurFacturationPrjSpe_RES <> 0

		MessageBox("Le moteur de facturation est réservé, mise à jour impossible.", "Alerte", MB_ICONERROR)
		Zoom.Ok = 'S'

	Else

		; initialisation des codes enregistrement et mise à jour date et user
	   CogRs_UT125.Dos 			= mz.Dos
		CogRs_UT125.UserCr 		= SYSTEM.User
		CogRs_UT125.UserCrDh 	= Time(7)
		CogRs_UT125.Note 			= Note_Creation_(C_Applic_DAV, 'cogrs_ut125')	
		CogRs_UT125.CeNote		= Condition(cogrs_ut125.Note = 0, 1, 2)
		CogRs_UT125.Cog_LoyRestNb= CogRs_UT125.Cog_LoyNb
		Cog_CalculerDateFinFacturation(CogRs_UT125.Cog_Date_Debut, CogRs_UT125.Cog_LoyNb, CogRs_UT125.Cog_Period, CogRs_UT125.Cog_Date_Fin)

	EndIf

Endp

;*
Public Procedure ZoomApresCreation 
; compte-rendu de création
Beginp
	
	If Zoom.Ok = 'O'
		Cog_UT126_GenererEcheancier(CogRs_UT125.COG_UT125)
	EndIf

	Zoom.Titrevar = [ CogRs_UT125.Affaire CogRs_UT125.Ref ]
	Cog_MoteurFacturationPrjSpe_LIB
	Lib_Affaire(CogRs_UT125.Affaire)

Endp				 

;*
Public Procedure ZoomModification 
; avant entrée en modif
Beginp
	Zoom.Res			= [ 'COG_UT125' mz.Dos CogRs_UT125.Affaire CogRs_UT125.Ref CogRs_UT125.Cog_LgNo]

	If CogRs_UT125.Cog_LoyFaNb > 0
		MessageBox("La facturation a débuté, modification impossible","Alerte", MB_ICONEXCLAMATION)
		Zoom.Ok = 'I'
	EndIf

	If Res_Affaire(cogrs_ut125.Affaire, 0)	<> 0	  
		MessageBox("Code affaire " & left(cogrs_ut125.Affaire) & " réservé, modification impossible.", "Alerte", MB_ICONERROR)
		Zoom.Ok = 'I'
	EndIf

Endp			  

;*
Public Procedure ZoomModificationRes		
; apres réservation enmodif
Beginp
	Note_Chargement_(C_Applic_DAV, cogrs_ut125.Note)
Endp					

;*
Public Procedure ZoomAvantRewrite 
Beginp

	; RESA COMMUNE
	If Cog_MoteurFacturationPrjSpe_RES <> 0

		MessageBox("Le moteur de facturation est réservé, mise à jour impossible.", "Alerte", MB_ICONERROR)
		Zoom.Ok = 'S'

	Else

	   cogrs_ut125.UserMo		= SYSTEM.User
	   cogrs_ut125.UserMoDh 	= Time(7)
		cogrs_ut125.Note 			= Note_Modification_ (C_Applic_DAV, cogrs_ut125.Note, 'cogrs_ut125')
		cogrs_ut125.CeNote		= Condition(cogrs_ut125.Note = 0, 1, 2)
		CogRs_UT125.Cog_LoyRestNb= CogRs_UT125.Cog_LoyNb
		Cog_CalculerDateFinFacturation(CogRs_UT125.Cog_Date_Debut, CogRs_UT125.Cog_LoyNb, CogRs_UT125.Cog_Period, CogRs_UT125.Cog_Date_Fin)

	EndIf

Endp														 

;*
Public Procedure ZoomApresModification 
; compte rendu de modification
Beginp

	If Zoom.Ok = 'O'
		Cog_UT126_GenererEcheancier(CogRs_UT125.COG_UT125)
	EndIf

	Zoom.Titrevar = [ CogRs_UT125.Affaire CogRs_UT125.Ref ]
	Lib_Affaire(CogRs_UT125.Affaire)
	Cog_MoteurFacturationPrjSpe_LIB
Endp				 

;*
Public Procedure ZoomSuppression ; avant entrée en suppression
Beginp
	Zoom.Res			= [ 'COG_UT125' mz.Dos CogRs_UT125.Affaire CogRs_UT125.Ref CogRs_UT125.Cog_LgNo]
Endp													  

;*
Public Procedure ZoomSuppressionRes
Beginp
Endp
														  
;*
Public Procedure ZoomAvantDelete 
Beginp

	; RESA COMMUNE
	If Cog_MoteurFacturationPrjSpe_RES <> 0

		MessageBox("Le moteur de facturation est réservé, suppression impossible.", "Alerte", MB_ICONERROR)
		Zoom.Ok = 'I'

	Else
		Note_Suppression_(C_Applic_DAV, cogrs_ut125.Note)
	EndIf

Endp

;*
Public Procedure ZoomApresSuppression ; compte rendu de suppression
Beginp

	If Zoom.ok = 'O'
		Cog_UT126_DeleteEcheancier(CogRs_UT125.COG_UT125)
	EndIf
	Cog_MoteurFacturationPrjSpe_LIB

Endp						

;*
;* Actions
;*

;*
Public Procedure ZoomAvantConsult
;
Beginp
	Maj_Menu_Boutons
Endp				  

;*
Public Procedure ZoomConsult 	
; Points d'arrets en consultation
Beginp
	Switch Harmony.Key
		Case K_F7		|	Zoom_Call()
		Case K_SF6		|	Note_Consultation_ (C_Applic_DAV, cogrs_ut125.Note)

		case K_F12
			if G7.PONG = True
				Envoyer_Selections
			endif

		Case Harmony.Dataarret = 1001
			Ping("COG_UT125", Cogrs_UT125.Cog_UT125)
			ProgramCall("cogpp_ut126.dhop")

		Case Harmony.Dataarret = 1002

			If MessageBox("Clôturer cette fiche et récupérer le restant à facturer?", "Question", MB_ICONQUESTION+MB_YESNO) = IDYES
				If Cog_UT125_Nouvelle_Repartition(Cogrs_UT125.Cog_UT125)	<> 0
					MessageBox("Erreur à la création de la nouvelle fiche.|Veuillez consulter le livre de bord.", "Erreur", MB_ICONERROR)
				EndIf
				ZoomReactualiserListe
				ZoomReactualiserPage
			EndIf
													 
	Endswitch 
Endp

;*
Public Procedure ZoomAvantInput			; permet de griser les boutons et les choix
Beginp
	Maj_Menu_Boutons
Endp

;*
Public Procedure ZoomArret					; exécutée si point d'arrêt en mode fiche ou liste
Beginp											; pour appel d'un zoom 
	Switch Harmony.Key
	Case K_F7	|	Zoom_Call()
	Case K_F8	|	Zoom_Call(Harmony.Arret)	; Appel de zoom
	
	Case K_SF6						; Saisie d'une note
		Note_Saisie_(C_Applic_DAV, cogrs_ut125.Note, 'cogrs_ut125')				
		XmeToolbarSetButtonInfo(IdOutilZoom,"NOTE", Condition(Not Note_Empty_(C_Applic_DAV), "<BITMAP>NOTE"	,"<BITMAP>NOTE_N"))
		
	
	Case Harmony.Dataarret = 8002
		If Harmony.Sourisbout = RIGHT_BUTTON
			Zoom_Call()
		Endif

	Endswitch
Endp

;*
Public Procedure ZoomFiltreAvantValeur
Beginp
Endp

;*
Public Procedure ZoomFiltreApresValeur 
Beginp
Endp	

;*
;* procedures liées à la lecture du ficher
;*

;*
Public Procedure ZoomApresCle
Beginp
	Construire_Condition_Selection(ZOOM_SQL_CONDITION_NORMALE)
Endp															

;*
Public Procedure ZoomApresRead
Beginp
	Zoom.Titrevar = [ CogRs_UT125.Affaire CogRs_UT125.Ref ]
Endp															



