
;*
;*	COGESER - Intégration des écritures comptables et/ou du plan comptable depuis Excel
;*

;*		Log	 Version	  N°modIf		Date		Modifications
;*
;*		JDT		6.2		01				03/2010	Version initiale : traitement des lignes d'écritures, des lignes de ventilations et/ou du plan comptable.
;*		JDT		6.2		02				04/2010	Modification pour adaptation nouvelles spécificités DIVALTO, retrait de l'alimentation automatique du champs C8.PIECE
;*		JDT		6.2		03				07/2010	Gestion du numéro d'écriture
;*		JDT		6.3		04				10/2010	Recompilation en version 6.3
;*		JDT		6.3		05				11/2010	Gestion anomalie quand code dossier est inférieur à 100

;*
;
; Ce programme sert à importer des écritures comptables ou des comptes comptables depuis Excel vers DIVALTO.
; Il peut être lancé par tunnel ou par un programme avec une interface IHM.
; Le programme créer une liaison DDE avec EXCEL puis il créer un fichier CCFM temporaire par écriture comptable qui est absorbable par DIVALTO.
;
;*

OverWrittenBy "COGuCC_TT_IMPORT_ECRITURES.DHOP"

Include	CCTC000.DHSP
Module	GTPMFIC.dhop
Module	Lctm000.Dhop

Public HTmpFile	CCFDD.DHSD	CCFM			CCFM_DEV_01	NoOpen DeleteOnExit	; Fichier d'intégration

Public Record	CCFDD.DHSD		C3				C3			; Plan comptables
Public Record	CCFDD.DHSD		C8				C8			; Ecritures
Public Record	CCFDD.DHSD		CP				CP			; Ventilation sur les pièces et les échéances
Public Record	CCFDD.DHSD		CX				CX			; Ventilation sur les axes

Public HFile	CCFDD.DHSD		CCFECR		CCFECR_TEMP	; Ecritures temporaires
Public Record	CCFDD.DHSD		C8				C8_TEMP		; Ecritures	temporaires
Public Record	CCFDD.DHSD		C4				C4				; Journaux

Public Record	CCFDD.DHSD		C3				C3_01		; Enregistrement tampon pour le "Plan comptables"
Public Record	CCFDD.DHSD		C8				C8_01		; Enregistrement tampon pour les "Ecritures"
Public Record	CCFDD.DHSD		CP				CP_01		; Enregistrement tampon pour les "Ventilation sur les pièces et les échéances"
Public Record	CCFDD.DHSD		CX				CX_01		; Enregistrement tampon pour les "Ventilation sur les axes"

Public Record	DDSYS.DHSD		RecordInfo	RecordInfo_DEV_C3		; Infos enregistrement table C3
Public Record	DDSYS.DHSD		RecordInfo	RecordInfo_DEV_C8		; Infos enregistrement table C8
Public Record	DDSYS.DHSD		RecordInfo	RecordInfo_DEV_CX		; Infos enregistrement table CX
Public Record	DDSYS.DHSD		DataInfo		DataInfo_DEV_C3		; Informations donnée pour la table C3
Public Record	DDSYS.DHSD		DataInfo		DataInfo_DEV_C8		; Informations donnée pour la table C8
Public Record	DDSYS.DHSD		DataInfo		DataInfo_DEV_CX		; Informations donnée pour la table CX

1	g_IndTabChamp		5,0			; Indice du tableau des champs de la table
1	g_TabChamp			37888			; Tableau contenant les inforamtions relatives aux champs de la table
	2	g_TabChamp_NumColonne		5,0*256 	; Numéro de la colonne sous Excel
	2	g_TabChamp_NomColonne		50*256 	; Nom du champ dans le dictionnaire et sous Excel
	2	g_TabChamp_C3					1,0*256	; Champ présent dans la table C3 (1 Non - 2 Oui)
	2	g_TabChamp_DataOffSet_C3	5,0*256	; (pointeur) Offset dans l'enreg	C3 (position début)
	2	g_TabChamp_TailleTot_C3		5,0*256	; (pointeur) Taille totale dans l'enreg C3 (position fin)
	2	g_TabChamp_TailleElem_C3	5,0*256	; (pointeur) Taille d'un élément dans l'enreg C3
	2	g_TabChamp_DataNat_C3		5,0*256	; (pointeur) Nature dans l'enreg C3
	2	g_TabChamp_NbDim_C3			5,0*256	; (pointeur) Nombre de dimensions dans l'enreg C3
	2	g_TabChamp_Dim_C3				5,0*256	; Dimension	(indice du tableau) dans l'enreg C3
	2	g_TabChamp_C8					1,0*256	; Champ présent dans la table C8 (1 Non - 2 Oui)
	2	g_TabChamp_DataOffSet_C8	5,0*256	; (pointeur) Offset dans l'enreg	C8 (position début)
	2	g_TabChamp_TailleTot_C8		5,0*256	; (pointeur) Taille totale dans C8 (position fin)
	2	g_TabChamp_TailleElem_C8	5,0*256	; (pointeur) Taille d'un élément dans l'enreg C8
	2	g_TabChamp_DataNat_C8		5,0*256	; (pointeur) Nature dans l'enreg C8
	2	g_TabChamp_NbDim_C8			5,0*256	; (pointeur) Nombre de dimensions dans l'enreg C8
	2	g_TabChamp_Dim_C8				5,0*256	; Dimension	(indice du tableau) dans l'enreg C8
	2	g_TabChamp_CX					1,0*256	; Champ présent dans la table CX (1 Non - 2 Oui)
	2	g_TabChamp_DataOffSet_CX	5,0*256	; (pointeur) Offset dans l'enreg CX (position début)
	2	g_TabChamp_TailleTot_CX		5,0*256	; (pointeur) Taille totale dans CX (position fin)
	2	g_TabChamp_TailleElem_CX	5,0*256	; (pointeur) Taille d'un élément	dans l'enreg CX
	2	g_TabChamp_DataNat_CX		5,0*256	; (pointeur) Nature dans l'enreg CX
	2	g_TabChamp_NbDim_CX			5,0*256	; (pointeur) Nombre de dimensions dans l'enreg CX
	2	g_TabChamp_Dim_CX				5,0*256	; Dimension	(indice du tableau) dans l'enreg CX

1	g_NumLigneExcel				14,0 = 5	; Première ligne lue sous Excel

1	g_Serveur						50			; Serveur DDE
1	g_Topic							50			; Objet destinataire (system,feuille)
1	g_IdServ							X			; Excel
1	g_IdServF						X			; Feuille du classeur

1	g_EnregistrementGenerique_C3	1500	; Enregistrement générique	pour l'enregistrement C3
1	g_EnregistrementGenerique_C8	1500	; Enregistrement générique	pour l'enregistrement C8
1	g_EnregistrementGenerique_CX	1500	; Enregistrement générique pour l'enregistrement CX
1	g_NumColonneCE1				5,0		; Numéro de colonne du champ CE1

1	x_st_00							X			; Pointeur	
1	s_datetrait						S
1	d_datetrait						>GTFDD.DHSD UserCrDh

; Variables pour la gestion de l'édition du compte rendu	CR
1	g_Msg_Num		8,0
1	l_LST_CR			L					; Adresse de la liste du CR
1	a_ADR_CR			16					; Adresse de la fonction de tri de la liste du CR
1	enr_LST_CR			258
	2	cog_CR_Num		8,0
	2	cog_CR_Lib		250

;*	03
Procedure COGP_EcritureCR(t_Msg)
; Procedure qui gère l'écriture du compte rendu et l'écriture dans le livre de bord
1	t_Msg		250
BeginP
	g_Msg_Num	= g_Msg_Num + 1
	cog_CR_Num	= g_Msg_Num
	cog_CR_Lib	= Left(t_Msg)
	ListInsert(l_LST_CR, enr_LST_CR)
	C3_Log_Ano(5193,Left(t_Msg),,,,,,,,,,)
EndP 

;*	03
Function Long COGF_Tri_Liste_CR(&EnrA,&EnrB)
; Procedure qui tri la liste du CR
1	EnrA	258
	2 CleA	8,0
1	EnrB	258
	2 CleB	8,0
BeginF
   FReturn SortCompare(CleA,CleB)
EndF 

;*	03
Procedure COGP_Edition_CompteRendu
; Edition du compte rendu
1	x_st_01	X
BeginP
	XMiLoad("COG_GT_II_IMPORT_ECRITURES.DHOI")
	x_st_01 = PrintBegin
	XMiPrint("COG_GT_II_IMPORT_ECRITURES.DHOI",1)
	ListBegin(l_LST_CR)
	Loop ListNext(l_LST_CR, enr_LST_CR) Not In (-1,0)
		XmiSetAttribut("cog_msg",AN_TITRE,Left(cog_CR_Lib))
		XMiPrint("COG_GT_II_IMPORT_ECRITURES.DHOI",2)
	EndLoop
	XMiPrint("COG_GT_II_IMPORT_ECRITURES.DHOI",4)
	x_st_01 = PrintEnd
EndP

;*	03
Function int COGF_RechercheEcrNoDernier(t_Dos)
; Fonction qui renvoi le dernier numéro d'écriture utilisée
1	t_Dos				>CCFDD.DHSD	Dos
1	x_st_01			X				; Pointeur
1	t_Key_01			254			; Clé
1	t_EcrNo			>CCFDD.DHSD	EcrNo
BeginF
	t_EcrNo = 0
	CCFECR_TEMP.Key = "H" & t_Dos & $FF
	t_Key_01	= t_Dos & $FF
	x_st_01 = IPRead(CCFECR_TEMP,	C8_TEMP,"H", t_Key_01)
 	If x_st_01 = 0 And C8_TEMP.Dos = t_Dos
		t_EcrNo = C8_TEMP.EcrNo
	EndIf
	FReturn(t_EcrNo)
EndF

;*	02
Function int COGF_Elimine_Parenthese(&p_Text, &p_IndTab)
; Fonction qui retire les carectères entre les parenthèses incluses à un champ de type tableau
; Retourne l'indice du tableau
1 p_Text		255
1 p_IndTab 	5,0

1 t_Car		1
1 i			x
1 t_Debut	5,0
1 t_Fin		5,0
BeginF	
	t_Debut	= String("(" , p_Text)
	t_Fin		= String(")" , p_Text)
	If t_Debut <> 0 And t_Fin <> 0		
		p_IndTab	= NMid(p_Text ,t_Debut, t_Fin-t_Debut , 0)
		p_Text	= FString(FString("A","D(" & t_Debut & "," & t_Fin & ")"), p_Text)		
	EndIf
	FReturn(0)
EndF

;*	02
Function Int COGF_Analyse_PremiereLigne(p_Nom_Dico)
1  p_Nom_Dico     25

1	t_Colonne		5,0	; Numéro de la colonne
1	t_Item			255	; Nom de la cellule
1	t_Valeur			255	; Contenu de la cellule

1	t_IndTab			5,0	; Indice d'un champ tableau
1	t_PosPoint		5,0	; Position du point dans le nom du champ
1  t_Nom_Enrrec   50		; Nom du champ

1	x_st_01			X		; Pointeur
BeginF
   ; Lecture des colonnes du fichier Excel
	For t_Colonne = 1 to 256
      ; Initialisation
		t_Item	= FString("A","l1c" & t_Colonne)	; retrait des espaces
      t_Valeur	= " "
      ; Récupération de la donnée
		x_st_01 = DDERequest(g_IdServF, t_Item, t_Valeur)  		
		If t_Valeur = " " 
			redofor
		EndIf			
      ; Si différent de la dernière colonne
		If t_Valeur <> "*FIN*"						
			; Retrait des parenthèses
			t_IndTab = 0
			COGF_Elimine_Parenthese(t_Valeur, t_IndTab)			
         ; Mise en majuscule
			t_Valeur = FString("U",t_Valeur)
         ; Recherche du nom de la table et du nom du champ 
			t_Nom_Enrrec	= " "
         t_PosPoint = String(".",t_Valeur,1)  
         If t_PosPoint <> 0
            ;t_Nom_Table		= Mid(t_Valeur, 1, t_PosPoint-1)
				t_Nom_Enrrec	= Mid(t_Valeur, t_PosPoint+1)
         Else
				t_Nom_Enrrec	= Left(t_Valeur)
         EndIf
			; Verification que le champ ne soit pas aussi présent dans la table C3
			Init RecordInfo_DEV_C3 = " "
			Init DataInfo_DEV_C3 = " "
			If DDGetRecord3(p_Nom_Dico, "C3", RecordInfo_DEV_C3) <> 0
			   COGP_EcritureCR(" -- Importation CCFM - Erreur " & DDGetTextError3)
			Else
				Do
					x_st_01 = DDNextData3(DataInfo_DEV_C3)
				While x_st_01 = 0
					If t_Nom_Enrrec = DataInfo_DEV_C3.MNemo
						ExitDo
					EndIf	
				Wend
				If t_Nom_Enrrec <> DataInfo_DEV_C3.MNemo
					Init RecordInfo_DEV_C3 = " "
					Init DataInfo_DEV_C3 = " "
				EndIf
			EndIf
			; Lecture de la définition de la table et du champ	pour l'enregistrement C8
			Init RecordInfo_DEV_C8 = " "
			Init DataInfo_DEV_C8 = " "
			If DDGetRecord3(p_Nom_Dico, "C8", RecordInfo_DEV_C8) <> 0
			   COGP_EcritureCR(" -- Importation CCFM - Erreur " & DDGetTextError3)
			Else
				Do
					x_st_01 = DDNextData3(DataInfo_DEV_C8)
				While x_st_01 = 0
					If t_Nom_Enrrec = DataInfo_DEV_C8.MNemo
						If Left(DataInfo_DEV_C8.MNemo) = "CE1"
							g_NumColonneCE1 = t_Colonne
						EndIf
						ExitDo
					EndIf	
				Wend
				If t_Nom_Enrrec <> DataInfo_DEV_C8.MNemo
					Init RecordInfo_DEV_C8 = " "
					Init DataInfo_DEV_C8 = " "
				EndIf
			EndIf
			; Verification que le champ ne soit pas aussi présent dans la table CX
			Init RecordInfo_DEV_CX = " "
			Init DataInfo_DEV_CX = " "
			If DDGetRecord3(p_Nom_Dico, "CX", RecordInfo_DEV_CX) <> 0
			   COGP_EcritureCR(" -- Importation CCFM - Erreur " & DDGetTextError3)
			Else
				Do
					x_st_01 = DDNextData3(DataInfo_DEV_CX)
				While x_st_01 = 0
					If t_Nom_Enrrec = DataInfo_DEV_CX.MNemo
						ExitDo
					EndIf	
				Wend
				If t_Nom_Enrrec <> DataInfo_DEV_CX.MNemo
					Init RecordInfo_DEV_CX = " "
					Init DataInfo_DEV_CX = " "
				EndIf
			EndIf
			; Sauvegarde de la colonne
         g_IndTabChamp = g_IndTabChamp + 1  
			g_TabChamp_NumColonne(g_IndTabChamp)	= t_Colonne							; Numéro de la colonne
         g_TabChamp_NomColonne(g_IndTabChamp)	= FString("U",t_Nom_Enrrec)	; Nom du champ
			If DataInfo_DEV_C3 <> " "
				g_TabChamp_C3(g_IndTabChamp)					= 2									; Champ présent dans la table C3
				g_TabChamp_DataOffSet_C3(g_IndTabChamp)	= DataInfo_DEV_C3.DataOffSet	; Offset dans l'enreg
	         g_TabChamp_TailleTot_C3(g_IndTabChamp)		= DataInfo_DEV_C3.TailleTot	; Taille totale
	         g_TabChamp_TailleElem_C3(g_IndTabChamp)	= DataInfo_DEV_C3.TailleElem	; Taille d'un élément
	         g_TabChamp_DataNat_C3(g_IndTabChamp)		= DataInfo_DEV_C3.DataNat		; Nature
		      g_TabChamp_NbDim_C3(g_IndTabChamp)			= DataInfo_DEV_C3.NbDim			; Nombre de dimensions
				g_TabChamp_Dim_C3(g_IndTabChamp)				= t_IndTab							; Dimension
			Else
				g_TabChamp_C3(g_IndTabChamp)					= 1									; Champ présent dans la table C3
				g_TabChamp_DataOffSet_C3(g_IndTabChamp)	= " "									; Offset dans l'enreg
	         g_TabChamp_TailleTot_C3(g_IndTabChamp)		= " "									; Taille totale
	         g_TabChamp_TailleElem_C3(g_IndTabChamp)	= " "									; Taille d'un élément
	         g_TabChamp_DataNat_C3(g_IndTabChamp)		= " "									; Nature
		      g_TabChamp_NbDim_C3(g_IndTabChamp)			= " "									; Nombre de dimensions
				g_TabChamp_Dim_C3(g_IndTabChamp)				= " "									; Dimension
			EndIf
 			If DataInfo_DEV_C8 <> " "
				g_TabChamp_C8(g_IndTabChamp)					= 2									; Champ présent dans la table C8
				g_TabChamp_DataOffSet_C8(g_IndTabChamp)	= DataInfo_DEV_C8.DataOffSet	; Offset dans l'enreg
	         g_TabChamp_TailleTot_C8(g_IndTabChamp)		= DataInfo_DEV_C8.TailleTot	; Taille totale
	         g_TabChamp_TailleElem_C8(g_IndTabChamp)	= DataInfo_DEV_C8.TailleElem	; Taille d'un élément
	         g_TabChamp_DataNat_C8(g_IndTabChamp)		= DataInfo_DEV_C8.DataNat		; Nature
		      g_TabChamp_NbDim_C8(g_IndTabChamp)			= DataInfo_DEV_C8.NbDim			; Nombre de dimensions
				g_TabChamp_Dim_C8(g_IndTabChamp)				= t_IndTab							; Dimension
 			Else
				g_TabChamp_C8(g_IndTabChamp)					= 1									; Champ présent dans la table C8
				g_TabChamp_DataOffSet_C8(g_IndTabChamp)	= " "									; Offset dans l'enreg
	         g_TabChamp_TailleTot_C8(g_IndTabChamp)		= " "									; Taille totale
	         g_TabChamp_TailleElem_C8(g_IndTabChamp)	= " "									; Taille d'un élément
	         g_TabChamp_DataNat_C8(g_IndTabChamp)		= " "									; Nature
		      g_TabChamp_NbDim_C8(g_IndTabChamp)			= " "									; Nombre de dimensions
				g_TabChamp_Dim_C8(g_IndTabChamp)				= " "									; Dimension
			EndIf
			If DataInfo_DEV_CX <> " "
				g_TabChamp_CX(g_IndTabChamp)					= 2									; Champ présent dans la table CX
				g_TabChamp_DataOffSet_CX(g_IndTabChamp)	= DataInfo_DEV_CX.DataOffSet	; Offset dans l'enreg
	         g_TabChamp_TailleTot_CX(g_IndTabChamp)		= DataInfo_DEV_CX.TailleTot	; Taille totale
	         g_TabChamp_TailleElem_CX(g_IndTabChamp)	= DataInfo_DEV_CX.TailleElem	; Taille d'un élément
	         g_TabChamp_DataNat_CX(g_IndTabChamp)		= DataInfo_DEV_CX.DataNat		; Nature
		      g_TabChamp_NbDim_CX(g_IndTabChamp)			= DataInfo_DEV_CX.NbDim			; Nombre de dimensions
				g_TabChamp_Dim_CX(g_IndTabChamp)				= t_IndTab							; Dimension
			Else
				g_TabChamp_CX(g_IndTabChamp)					= 1									; Champ présent dans la table CX
				g_TabChamp_DataOffSet_CX(g_IndTabChamp)	= " "									; Offset dans l'enreg
	         g_TabChamp_TailleTot_CX(g_IndTabChamp)		= " "									; Taille totale
	         g_TabChamp_TailleElem_CX(g_IndTabChamp)	= " "									; Taille d'un élément
	         g_TabChamp_DataNat_CX(g_IndTabChamp)		= " "									; Nature
		      g_TabChamp_NbDim_CX(g_IndTabChamp)			= " "									; Nombre de dimensions
				g_TabChamp_Dim_CX(g_IndTabChamp)				= " "									; Dimension
			EndIf
       Else
         ; Colonne fin : t_Valeur = "*FIN*"
			ExitFor
      EndIf
   Next
   FReturn(0)
EndF

;*	01
Public Function int COGF_Import_CCFM
1	t_Item					255						; Nom de la cellule
1	t_Valeur					255						; Contenu de la cellule

1	x_st_01					X							; Pointeur
1	i							5,0 = 0					; Compteur

1	t_ValColonneCE1		1 = " "					; Type de ligne

1	t_EcrNo_DIVALTO_00	>CCFDD.DHSD	EcrNo
1	t_EcrNo_DIVALTO_01	>CCFDD.DHSD	EcrNo
1	t_EcrValNo				>CCFDD.DHSD	EcrValNo

BeginF	
   g_Serveur	= "Excel"			   
   g_Topic		= "COGESER - CCFM"
   g_IdServF	= DDEConnect(g_Serveur, g_Topic) 	
   If g_IdServF <> 0   		
 		; Initilisation
		t_EcrValNo			= 0
		x_st_01 = TmpFCreate(CCFM_DEV_01)
		t_EcrNo_DIVALTO_00	= COGF_RechercheEcrNoDernier(MZ.Dos)
		t_EcrNo_DIVALTO_01	= t_EcrNo_DIVALTO_00 + 1
		; Enregistrement des champs (1° ligne d'Excel)
		Init g_TabChamp	= " "
		g_IndTabChamp		= 0
		g_NumColonneCE1	= 0
		If COGF_Analyse_PremiereLigne("ccfdd.dhsd") = 0
			; Lecture des données à partir de la ligne "g_NumLigneExcel"							
			g_NumLigneExcel	= g_NumLigneExcel - 1	; Retrait de la 1° incrémentation
			Do
				g_NumLigneExcel = g_NumLigneExcel + 1
         	g_EnregistrementGenerique_C3 = " "
         	g_EnregistrementGenerique_C8 = " "
				g_EnregistrementGenerique_CX = " "
				t_Valeur	= " " 
	         t_Item	= "l" & Left(g_NumLigneExcel) & "c1"
            t_Item	= FString("A", t_Item)
            x_st_01 = DDERequest(g_IdServF, t_Item, t_Valeur)
			While t_Valeur <> " "
		      ; Détermination du type de ligne (générale ou ventilation) en fonction de la valeur de CE1
	         t_Item	= "l" & Left(g_NumLigneExcel) & "c" & Left(g_NumColonneCE1)
	         t_Item	= FString("A", t_Item)
				t_Valeur	= " "
	         x_st_01	= DDERequest(g_IdServF, t_Item, t_Valeur)
				t_ValColonneCE1 = Left(t_Valeur)
				; Lecture de la ligne Excel
				For i = 1 to g_IndTabChamp				      			
		         t_Item	= "l" & Left(g_NumLigneExcel) & "c" & Left(g_TabChamp_NumColonne(i))
		         t_Item	= FString("A", t_Item)
					t_Valeur	= " "
		         x_st_01	= DDERequest(g_IdServF, t_Item, t_Valeur)
					; En fonction de la positon du champ, enregistrement dans la variable "g_EnregistrementGenerique"
					Switch t_ValColonneCE1
						Case 3		; Plan comptable
							If g_TabChamp_C3(i) = 2
								If g_TabChamp_Dim_C3(i) > 0 ; Tableau
							  		Switch g_TabChamp_DataNat_C3(i)
										Case g_TabChamp_DataNat_C3(i) in (1..2)	; Numérique
											Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i) + g_TabChamp_TailleElem_C3(i)*(g_TabChamp_Dim_C3(i) - 1), g_TabChamp_TailleElem_C3(i)) = FString("A",Str(t_Valeur))
										Case 4												; Date
											FDate(Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i) + g_TabChamp_TailleElem_C3(i)*(g_TabChamp_Dim_C3(i) - 1), g_TabChamp_TailleElem_C3(i)), FString("B", t_Valeur))
										Default
											Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i) + g_TabChamp_TailleElem_C3(i)*(g_TabChamp_Dim_C3(i) - 1), g_TabChamp_TailleElem_C3(i)) = FString("B", t_Valeur)
									EndSwitch
								Else
							  		Switch g_TabChamp_DataNat_C3(i)
										Case g_TabChamp_DataNat_C3(i) in (1..2)	; Numérique
											Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i), g_TabChamp_TailleTot_C3(i))	= FString("A",Str(t_Valeur))
										Case 4												; Date
											FDate(Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i), g_TabChamp_TailleTot_C3(i)), FString("B", t_Valeur))
										Default
											Mid(g_EnregistrementGenerique_C3, g_TabChamp_DataOffSet_C3(i), g_TabChamp_TailleTot_C3(i))	= FString("B", t_Valeur)
									EndSwitch
								EndIf
							EndIf
						Case 8		; Ecriture
							If g_TabChamp_C8(i) = 2
								If g_TabChamp_Dim_C8(i) > 0 ; Tableau
							  		Switch g_TabChamp_DataNat_C8(i)
										Case g_TabChamp_DataNat_C8(i) in (1..2)	; NumériqueD, Numérique
											Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i) + g_TabChamp_TailleElem_C8(i)*(g_TabChamp_Dim_C8(i) - 1), g_TabChamp_TailleElem_C8(i)) = FString("A",Str(t_Valeur))
										Case 4												; Date
											FDate(Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i) + g_TabChamp_TailleElem_C8(i)*(g_TabChamp_Dim_C8(i) - 1), g_TabChamp_TailleElem_C8(i)), FString("B", t_Valeur))
										Default
											Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i) + g_TabChamp_TailleElem_C8(i)*(g_TabChamp_Dim_C8(i) - 1), g_TabChamp_TailleElem_C8(i)) = FString("B", t_Valeur)
									EndSwitch
								Else
							  		Switch g_TabChamp_DataNat_C8(i)
										Case g_TabChamp_DataNat_C8(i) in (1..2)	; NumériqueD, Numérique
											Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i), g_TabChamp_TailleTot_C8(i))	= FString("A",Str(t_Valeur))
										Case 4												; Date
											FDate(Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i), g_TabChamp_TailleTot_C8(i)), FString("B", t_Valeur))
										Default
											Mid(g_EnregistrementGenerique_C8, g_TabChamp_DataOffSet_C8(i), g_TabChamp_TailleTot_C8(i))	= FString("B", t_Valeur)
									EndSwitch
								EndIf
							EndIf
						Case 2		; Ventilation
							If g_TabChamp_CX(i) = 2
								If g_TabChamp_Dim_CX(i) > 0 ; Tableau
							  		Switch g_TabChamp_DataNat_CX(i)
										Case g_TabChamp_DataNat_CX(i) in (1..2)	; NumériqueD, Numérique
											Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i) + g_TabChamp_TailleElem_CX(i)*(g_TabChamp_Dim_CX(i) - 1), g_TabChamp_TailleElem_CX(i)) = FString("A",Str(t_Valeur))
										Case 4												; Date
								  			FDate(Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i) + g_TabChamp_TailleElem_CX(i)*(g_TabChamp_Dim_CX(i) - 1), g_TabChamp_TailleElem_CX(i)), FString("B", t_Valeur))
										Default
								  			Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i) + g_TabChamp_TailleElem_CX(i)*(g_TabChamp_Dim_CX(i) - 1), g_TabChamp_TailleElem_CX(i)) = FString("B", t_Valeur)
									EndSwitch
								Else
							  		Switch g_TabChamp_DataNat_CX(i)
										Case g_TabChamp_DataNat_CX(i) in (1..2)	; NumériqueD, Numérique
											Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i), g_TabChamp_TailleTot_CX(i))	= FString("A",Str(t_Valeur))
										Case 4												; Date
											FDate(Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i), g_TabChamp_TailleTot_CX(i)), FString("B", t_Valeur))
										Default
											Mid(g_EnregistrementGenerique_CX, g_TabChamp_DataOffSet_CX(i), g_TabChamp_TailleTot_CX(i))	= FString("B", t_Valeur)
									EndSwitch
								EndIf
							EndIf
					EndSwitch
		      Next															
				; Enregistrement								
				Switch t_ValColonneCE1
					Case 3
						Init C3 = " "
							; 05 - DEBUT - Gestion anomalie quand code dossier est inférieur à 100	
							Init C3_01 = " "
							C3_01 = g_EnregistrementGenerique_C3
							C3 = C3_01
							C3.Dos = C3.Dos
							C3.Etb = C3.Etb
							; 05 - FIN - Gestion anomalie quand code dossier est inférieur à 100	
						C3.Ce2	= " "
						C3.Ce6	= 1
						C3.NomAbr = Nom_Abrege(C3.Lib)
						If C3.CptCol <> " "
							C3.Ce8	= 1
						EndIf
						C3.UserCrDh = Time(7)
						C3.UserCr	= SYSTEM.User
						x_st_01	= IWrite(CCFM_DEV_01, C3, "P")
						If x_st_01 <> 0
							COGP_EcritureCR(" -- Importation CCFM - Erreur lors de l'écriture dans la table C3.")
						EndIf
					Case 8
						Init C8 = " "
							; 05 - DEBUT - Gestion anomalie quand code dossier est inférieur à 100	
							Init C8_01 = " "
							C8_01 = g_EnregistrementGenerique_C8
							C8 = C8_01
							C8.Dos = C8.Dos
							C8.Etb = C8.Etb
							; 05 - FIN - Gestion anomalie quand code dossier est inférieur à 100	
						; Importation
						If t_EcrValNo <> 0 And t_EcrValNo <> C8.EcrValNo
							x_st_01 = HClose(CCFM_DEV_01)
							x_st_01 = C3_Integration(CCFM_DEV_01.Name,)
							If x_st_01 <> True
								COGP_EcritureCR(" -- Importation CCFM - Erreur : l'importation de l'écriture " & Left(t_EcrValNo) & " n'a pas pu se dérouler correctement.")
							Else
								COGP_EcritureCR(" -- Importation CCFM - Transfert vers DIVALTO de l'écriture numéro " & Left(t_EcrValNo) & " - " & Left(t_EcrNo_DIVALTO_01) & " .")
							EndIf
							x_st_01 = TmpFCreate(CCFM_DEV_01)
							t_EcrNo_DIVALTO_00	= COGF_RechercheEcrNoDernier(MZ.Dos)
							t_EcrNo_DIVALTO_01	= t_EcrNo_DIVALTO_00 + 1
						EndIf
						t_EcrNo_DIVALTO_00	= t_EcrNo_DIVALTO_00 + 1
						C8.EcrNo					= t_EcrNo_DIVALTO_00
						t_EcrValNo				= C8.EcrValNo
						C8.UserCrDh				= Time(7)
						C8.UserCr				= SYSTEM.User
						x_st_01	= IWrite(CCFM_DEV_01, C8, "P")
						If x_st_01 <> 0
							COGP_EcritureCR(" -- Importation CCFM - Erreur lors de l'écriture dans la table C8.")
						EndIf
					Case 2
						Init CX = " "
							; 05 - DEBUT - Gestion anomalie quand code dossier est inférieur à 100	
							Init CX_01 = " "
							CX_01 = g_EnregistrementGenerique_CX
							Init CX = CX_01
							CX.Dos = CX.Dos
							CX.Etb = CX.Etb
							; 05 - FIN - Gestion anomalie quand code dossier est inférieur à 100	
						CX.Ce2	= " "
						CX.EcrNo		= C8.EcrNo
						CX.UserCrDh = Time(7)
						CX.UserCr	= SYSTEM.User
						x_st_01	= IWrite(CCFM_DEV_01, CX, "P")
						If x_st_01 <> 0
							COGP_EcritureCR(" -- Importation CCFM - Erreur lors de l'écriture dans la table CX.")
						EndIf
					Default
						COGP_EcritureCR(" -- Importation CCFM - Erreur de donnée : la colonne C8.CE1 ne contient pas une valeur reconnue pas le progiciel.")
				EndSwitch
			Wend
			; Importation
			x_st_01 = HClose(CCFM_DEV_01)
			x_st_01 = C3_Integration(CCFM_DEV_01.Name,)
			If x_st_01 <> True
				COGP_EcritureCR(" -- Importation CCFM - Erreur : l'importation de l'écriture " & Left(t_EcrValNo) & " n'a pas pu se dérouler correctement.")
			Else
				COGP_EcritureCR(" -- Importation CCFM - Transfert vers DIVALTO de l'écriture numéro " & Left(t_EcrValNo) & " - " & Left(t_EcrNo_DIVALTO_01) & " .")
			EndIf
      EndIf
		; Déconnexion
		x_st_01 = DDEDeconnect(g_IdServF)
   EndIf
	FReturn(0)
EndF

;*
;Programme principal
;*	00
Main
	
If PingReceive("ZEchange", MZ) = 0
	; Initialisation
	Seek_Soc(MZ.Dos)		; Contrôle du dossier
	Seek_Ets(MZ.Etb)
	Harm_Init(60,60,60,60,60)
	; Création et initialisation de la liste du compte rendu CR
	g_Msg_Num = 0
	l_LST_CR = ListCreate
	GetAdressFunction(" ", "COGF_Tri_Liste_CR", a_ADR_CR)	; La fonction GetAdressFunction permet d'obtenir l'adresse d'une fonction en vue de son exécution par l'instruction FunctionCall
	ListMode(l_LST_CR, 1, a_ADR_CR)								; ListMode permet d'avoir les listes automatiquements triées

	d_datetrait = Time(7)																															 
	s_datetrait = Mid(d_datetrait,7,2) & "/" & Mid(d_datetrait,5,2) & "/" & Mid(d_datetrait,1,4) & "-" & Mid(d_datetrait,9,2) & ":" &	Mid(d_datetrait,11,2) & ":" & Mid(d_datetrait,13,2)
	s_datetrait = Fstring("0", s_datetrait)
	COGP_EcritureCR("==== IMPORTATION CCFM - DEBUT : " & s_datetrait & " ====")

	If DDEOpen = 0
		COGP_EcritureCR(" -- Importation CCFM - Erreur d'initialisation (DDE Open).")
	EndIf
	g_Serveur	= "Excel"
	g_Topic		= "system"
	g_IdServ		= DDEConnect(g_Serveur,g_Topic) T
	If g_IdServ = 0
		COGP_EcritureCR(" -- Importation CCFM - Erreur lors de l'accès à l'application Excel (DDE Open).")
	EndIf	
	; Importation des données
	COGF_Import_CCFM
	
	; Déconnexion
	x_st_00 = DDEDeconnect(g_IdServ)
	x_st_00 = DDEClose 

	; Fin
	d_datetrait = Time(7)																															 
	s_datetrait = Mid(d_datetrait,7,2) & "/" & Mid(d_datetrait,5,2) & "/" & Mid(d_datetrait,1,4) & "-" & Mid(d_datetrait,9,2) & ":" &	Mid(d_datetrait,11,2) & ":" & Mid(d_datetrait,13,2)
	s_datetrait = Fstring("0", s_datetrait)

	; Impression du compte rendu CR
	If Left(MZ.Echange) = "COGP_Edition_CompteRendu"
		COGP_EcritureCR(" -- Importation CCFM - Impression du compte rendu : pour plus de renseignements, veuillez consulter le libre de bord.")
		COGP_EcritureCR("==== IMPORTATION CCFM - FIN : " & s_datetrait & " ====")
		COGP_Edition_CompteRendu
	Else
		COGP_EcritureCR("==== IMPORTATION CCFM - FIN : " & s_datetrait & " ====")
	EndIf

EndIf

ProgramExit
