SetModuleInfo('$Id: cogpp_moteurprjspec.dhsp 7357 2015-01-09 16:28:33Z admin $')
;>xdiva
;*
;*		Objet : Nom du programme / module - Programme Cogpp_std.dhsp 
;*

;*
;*		Log	Version		N° modif		Date			Modifications
;*		--------------------------------------------------------------------------------------------------------------
;*

;*
;*		Procédures / Fonctions				Commentaires
;*		--------------------------------------------------------------------------------------------------------------
;*		InitialiserVariables					Initialisation des variables
;*		NomDuTraitementPrincipal			
;*		SaisiePage1								Saisie de la première page du masque
;*

;*
;*
;*

;
Include	"gttcz00.dhsp"									;déclarations communes

;
Module	"Cogtm_000.dhop"								;module de fonctions communes

;
Public Record	"gtfdd.dhsd"	xq			xq_cog	;enregistrement de travail

;
1  id_toolbar	L						;ident barre d'outils
1  id_menu		L						;ident menu

1	AdrProc		16						;adresse des procédures appelées dans le module associé
1	erreur		x		= false		;détermine s'il y a eu des erreurs lors de l'exécution du programme

1	tunnel		1,0	= false


;*
;	Procédures / Fonctions générale
;*

;* Initialisation des variables
function int Cog_InitialiserVariables
recordsql	a5rsuser.dhoq	utilisateur						;Utilisateurs

beginf

	if pingreceive("zechange",mz) <> 0

		;le programme n'a pas été lancé à partir du menu, on recherche l'utilisateur
		utilisateur.init()
		utilisateur.where.exists(system.User)
		if utilisateur.select() = 0

			if not tunnel
				messagebox(modify("%1",left(system.user),translate("Utilisateur %1 non défini dans la base Divalto")),translate("Alerte"),mb_iconexclamation)
			endif
			freturn(false)

		else

			mz.dos		= utilisateur.dos
			mz.etb		= utilisateur.etb
			mz.depo		= utilisateur.depo
			mz.mecle		= "Cogee_MoteurPrjSpec.dhof"
			
			mz.titre2	= ""

		endif

	endif

	;commentaire du programme
	ProgramSetComment(translate(""))

	;recherche du dossier et T000
	Seek_Soc(MZ.dos)

	;chargement du masque écran
	xmeload mz.mecle
	xmetitle(mz.titre2)
	XmeInfoPage(mz.mecle,1)						;lire la taille de la page
	XmeSetWindowSize(mz.mecle,1,Harmony.Opara3,Harmony.Opara4)

	;chargement des barres d'outils
	id_toolbar = XmeToolbarGetId (mz.mecle,"MAIN")
	XmeToolbarSetWindow (id_toolbar,mz.mecle,1)

	;chargement du menu
	id_menu = XmeMenuGetId (mz.mecle,"MAIN")
	XmeMenuSetWindow (id_menu,mz.mecle,1)

	;chargement du masque d'impression
	;xmiload mz.micle

	FReturn(true)

endf

;*
procedure Cog_FinProgramme
;
beginp

	Cog_EcritureLivreDeBord(translate("<-- "))
	programexit

endp

;*
procedure Cog_AfficherTraitement
;
beginp

	;test d'abandon du programme en cours de traitement
	if getchar()=$E8 and messagebox(translate("Abandon du traitement en cours ?"),translate("Confirmation"),mb_iconquestion+mb_yesno)=idyes
		Cog_EcritureLivreDeBord(translate("Abandon utilisateur"))
		Cog_FinProgramme
	endif

	xmedispv mz.mecle 3 xme_mode_gosub
	xmeret
	xmedispv mz.mecle 4 xme_mode_gosub
	xmeret

endp

;*
function int Cog_FiltresOk
;
beginf

	freturn(true)

endf


;*
;	Traitements
;*

;*
procedure NomDuTraitementPrincipal
beginp

	Cog_EcritureLivreDeBord(translate("--> zzzzzzzzzzzzzzzzzzzzzzzzzzz"))

	;affichage de la page de traitement
	xmedispv mz.mecle 2 2

	loop true

		Cog_AfficherTraitement

		if Cog_FiltresOk

			Cog_AfficherTraitement

		endif

	endloop

	xmeret

	Cog_EcritureLivreDeBord(translate("<-- zzzzzzzzzzzzzzzzzzzzzzzzzzz"))

endp


;*
;	Saisie des pages du masque
;*

;* Saisie du masque page 1
public procedure Cog_SaisiePage1
1 fin		1,0	= 0

beginp

	xmeinput(mz.mecle,1,0,xme_mode_goto)

	do
	                                
		switch harmony.key            ;tests des causes de l'interruption
	
		case harmony.dataarret = 8002
			if Harmony.Sourisbout = Right_Button
				Zoom_Call()
			elsif Harmony.Sourisclic = Double_Click
				Harmony.Retour = Xmenext_Simulation_Touche
				Harmony.Cplretour = k_f8
			endif
		
		case k_f7                ;zoom généralisé
			Zoom_Call()
		
		case k_f8                ;zooms
			Zoom_Call(harmony.arret)
	
		case k_f9                ;abandon
			fin = 1
	
		case vsw in (k_f10,k_tab,k_return,k_down)
			if messagebox(translate("zzzzzzzzzzzzzzzzzzzzzzzzzzz ?"),translate("Confirmation"),mb_yesno+mb_iconquestion)=idyes
				
				NomDuTraitementPrincipal
	
				if erreur
					messagebox(translate("Des erreurs ont été détectées.|Consultez le livre de bord"),translate("Alerte"),mb_iconexclamation)
				endif
	
				fin=1
	
			endif

		endswitch

	while fin = 0         ;suite de la saisie
		xmenext(harmony.retour,harmony.cplretour)
	wend
		
endp


;*
;	Programme principal
;*
main
	
	if pingreceive("xq_cog",xq_cog) = 0
		tunnel	= true
	endif

	if Cog_InitialiserVariables

		if not tunnel
	
			GetAdressProcedure(mz.MtCle,"ChargementAvant",AdrProc)
			procedurecall(AdrProc)
			Cog_SaisiePage1
	
		else	;programme piloté
	
			NomDuTraitementPrincipal
	
		endif

	endif
