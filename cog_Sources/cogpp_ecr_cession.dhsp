SetModuleInfo('$Id$')
;>xdiva
;*
;*		Objet : Génération des écritures de cession - Programme Cogpp_ecr_Cession.dhsp 
;*

;*
;*		Log	Version		N° modif		Date			Modifications
;*		--------------------------------------------------------------------------------------------------------------
;*		YLEF	P205a			Init			10/2014		DAVFIN_FE001
;*

;*
;*		Procédures / Fonctions				Commentaires
;*		--------------------------------------------------------------------------------------------------------------
;*		InitialiserVariables					Initialisation des variables
;*		GenererEcritures			
;*		SaisiePage1								Saisie de la première page du masque
;*


;*
;*		Déclarations
;*	

;
Include	"gttcz00.dhsp"																	;déclarations communes

;
Module	"Cogtm_000.dhop"																;module de fonctions communes
Module	"CCPMFIC.DHOP"
Module	"CCPM000.DHOP"

;
Htmpfile	"ccfdd.dhsd"  						CCFM	 			CCFM			openonuse	deleteonexit

;
Public RecordSQL	"CCRSIMMO.DHOQ"		IMMO				CogRs_I1				; Immobilisations
Public RecordSQL	"CCRSJCA.DHOQ"			JOURNAL			CogRs_Jnl			; Journaux
Public RecordSQL	"CCRSJCA.DHOQ"			COMPTE			CogRs_C3Ces
Public RecordSQL	"CCRSJCA.DHOQ"			COMPTE			CogRs_C3CesVal
Public RecordSQL	"CCRSJCA.DHOQ"			COMPTE			CogRs_C3CesAmo
Public RecordSQL	"CCRSDOS.DHOQ"			DOSNUM			CogRs_CN				; Numérotation dossier cpt
Public RecordSQL	"CCRSDOS.DHOQ"			ETBCPT			CogRs_CETS			; Etablissement comptable
Public RecordSQL	"GTRSPCE.DHOQ"			MOUVEMENT		CogRs_MOUV			; Mouvement

;
Public Record 	"Ccfdd.dhsd"				CA
Public Record 	"Ccfdd.dhsd"				CD
Public Record 	"Ccfdd.dhsd"				C0
Public Record 	"Ccfdd.dhsd"				C8
Public Record 	"Ccfdd.dhsd"				CX
Public Record	"CCfdd.dhsd"				XQ											;enregistrement de travail

;
1  id_toolbar	L																			;ident barre d'outils
1  id_menu		L																			;ident menu

1	readerI1		L
1	numeroPiece	>ccfdd.dhsd		Piece
1	txtMSG		S
1	compteur		8,0
1	ecrNo			>ccfdd.dhsd		EcrValNo

1	AdrProc		16																			;adresse des procédures appelées dans le module associé
1	erreur		x		= false															;détermine s'il y a eu des erreurs lors de l'exécution du programme

1	tunnel		1,0	= false

;
Const		C_ETAT_BIEN_VENDU		= 2
Const		C_ETAT_BIEN_REBUT		= 3
Const		C_SENS_DEBIT			= 1
Const		C_SENS_CREDIT			= 2

;*
;	Procédures / Fonctions générale
;*

;* Initialisation des variables
function int Cog_InitialiserVariables
;
RecordSQL	"a5rsdos.dhoq"	utilisateur						;Utilisateurs
1		wCpt		>ccfdd.dhsd		Cpt
BeginF

	if pingreceive("zechange",mz) <> 0
	
		;le programme n'a pas été lancé à partir du menu, on recherche l'utilisateur
		utilisateur.init()
		utilisateur.where.exists(system.User)
		if utilisateur.select() = 0
	
			if not tunnel
				messagebox(modify("%1",left(system.user),translate("Utilisateur %1 non défini dans la base Divalto")),translate("Alerte"),mb_iconexclamation)
			endif
			freturn(false)
	
		else
	
			MZ.Dos		= utilisateur.dos
			MZ.Etb		= utilisateur.etb
			MZ.Depo		= utilisateur.depo
			MZ.MeCle		= "Cogee_ecr_Cession.dhof"
			;mz.micle		= "Cogii_ecr_Cession.dhoi"
			MZ.MtCle		= "Cogtt_ecr_Cession.dhop"
			MZ.Titre2	= "Génération des écritures de cession"
	
		endif
	
	endif

	;commentaire du programme
	ProgramSetComment(translate("Génération des écritures de cession"))

	;recherche du dossier et T000
	If Seek_Soc(mz.dos) <> 0
		Cog_EcritureLivreDeBord("Dossier GESCOM " & MZ.Dos & " non trouvé.", applic='DCPT')
		FReturn(0)
	EndIf
	If Seek_CA(MZ.Dos, application=TRUE) <> 0
		Cog_EcritureLivreDeBord("Dossier comptable " & MZ.Dos & " non trouvé.", applic='DCPT')
		FReturn(0)
	EndIf
	If Seek_CD() <> 0
		Cog_EcritureLivreDeBord("Dossier immobilisation " & MZ.Dos & " non trouvé.", applic='DCPT')
		FReturn(0)
	EndIf

	; journal de cession
	CogRs_Jnl.Init()
	CogRs_Jnl.Where.PK(CD.Cog_CesJnl)	
	If CogRs_Jnl.Select() = 0 OR CD.Cog_CesJnl = ' '
		Cog_EcritureLivreDeBord("Erreur de paramétrage du journal pour les écritures de cession.", applic='DCPT')
		FReturn(0)
	EndIf

	;chargement du masque écran
	xmeload mz.mecle
	xmetitle(mz.titre2)
	XmeInfoPage(mz.mecle,1)						;lire la taille de la page
	XmeSetWindowSize(mz.mecle,1,Harmony.Opara3,Harmony.Opara4)

	;chargement des barres d'outils
	id_toolbar = XmeToolbarGetId (mz.mecle,"MAIN")
	XmeToolbarSetWindow (id_toolbar,mz.mecle,1)

	;chargement du menu
	id_menu = XmeMenuGetId (mz.mecle,"MAIN")
	XmeMenuSetWindow (id_menu,mz.mecle,1)

	;chargement du masque d'impression
	;xmiload mz.micle

	; comptes
	wCpt = Condition(CD.Cog_CptCes <> ' ', CD.Cog_CptCes, '20000000') ; 20000000 valeur par défaut		
	CogRs_C3Ces.Init()
	CogRs_C3Ces.Where.PK(wCpt)
	CogRs_C3Ces.Select()

	wCpt = Condition(CD.Cog_CptCesVal <> ' ', CD.Cog_CptCesVal, '67500000') ; 67500000 valeur par défaut	
	CogRs_C3CesVal.Init()
	CogRs_C3CesVal.Where.PK(wCpt)
	CogRs_C3CesVal.Select()

	wCpt = CogRs_I1.Cog_CptCesAmo	= Condition(CD.Cog_CptCesAmo <> ' ', CD.Cog_CptCesAmo, '28000000') ; 28000000 valeur par défaut	
	CogRs_C3CesAmo.Init()
	CogRs_C3CesAmo.Where.PK(wCpt)
	CogRs_C3CesAmo.Select()

	freturn(true)

endf

;*
procedure Cog_FinProgramme
;
BeginP

	Cog_EcritureLivreDeBord(translate("<-- Arrêt programme de génération des écritures de cession"), applic='DCPT')
	programexit

endp

;*
Procedure Cog_AfficherTraitement
;
BeginP

	If not tunnel
		G3_Afficher_Selection
		G3_Afficher_Traitement
	EndIf

endp

;*
Function int Cog_FiltresOk
;
beginf

	FReturn(true)

endf

;*
Function Long Cog_Resa_RSQL(wNomRS, wResa, wCodR)
; valeur de retour: celle de la fonction FShare()
RecordSQLptr	CogPRS_SQL
1		wNomRS	256
1		wResa		256
1		wCodR		1
BeginF

	PtrRecordSql(left(wNomRS), CogPRS_SQL)

	FReturn(CogPRS_SQL.FShare(left(wResa), wCodR))
EndF

;*
Function int Cog_Attribuer_Numerotation(&wPiece)
;	 0 --> non attribué
;	 1 --> wPiece est garni

1		wRet			1,0  = 0
1		wPiece		>ccfdd.dhsd		Piece

BeginF

	; Numérotation pièce pour les écritures
	If CogRs_Jnl.PieceSais > 1		; obligatoire; facultatif ou automatique

		Switch CogRs_Jnl.PieceCod
			Case 1
				Cog_EcritureLivreDeBord("Erreur de paramétrage du journal pour la numérotation de pièce:|"\
				& "il n'est pas possible d'utiliser la numérotation des factures GESCOM.", applic='DCPT')
				FReturn(0)

			; NUMEROTATION SUR CN
			Case 2
			 	CogRs_CN.Init()
				CogRs_CN.Where.PK(CA.Dos)
				If CogRs_CN.Select() = 0
				 	Cog_EcritureLivreDeBord("Dossier numérotation comptable " & MZ.Dos & " non trouvé.", applic='DCPT')
					FReturn(0)
				EndIf
				If Cog_Resa_RSQL("CogRs_CN", Formater_Res('C3CA') & CogRs_CN.Dos, 'R')	= 0
					CogRs_CN.Piece++
					CogRs_CN.Update()
					Cog_Resa_RSQL("CogRs_CN", Formater_Res('C3CA') & CogRs_CN.Dos, 'L')
					wPiece = CogRs_CN.Piece
					FReturn(1)
				Else
					Cog_EcritureLivreDeBord("Dossier numérotation comptable " & MZ.Dos & " réservé.", applic='DCPT')
					FReturn(0)
				EndIf

			; NUMEROTATION SUR CETS
			Case 4
				If CogRs_I1.Etb = ' '
					Cog_EcritureLivreDeBord("Numérotation établissement impossible: le bien n°" & CogRs_I1.Immo \
					& " n'a pas d'établissement associé (Paramètre journal de cession).", applic='DCPT')
					FReturn(0)
				EndIf
				CogRs_CETS.Init()
				CogRs_CETS.Where.PK(CogRs_I1.Etb)
				If CogRs_CETS.Select() = 0
					Cog_EcritureLivreDeBord("Etablissement comptable " & CogRs_I1.Etb & " non trouvé.", applic='DCPT')
					FReturn(0)
				EndIf
				If Cog_Resa_RSQL("CogRs_CETS", Formater_Res('C3CETS') & CogRs_CETS.Dos & CogRs_CETS.Etb, 'R')	= 0
					CogRs_CETS.Piece++
					CogRs_CETS.Update()
					Cog_Resa_RSQL("CogRs_CETS", Formater_Res('C3CETS') & CogRs_CETS.Dos & CogRs_CETS.Etb, 'L')
					wPiece = CogRs_CETS.Piece
					FReturn(1)
				Else
					Cog_EcritureLivreDeBord("Etablissement comptable " & CogRs_I1.Etb & " réservé.", applic='DCPT')
					FReturn(0)
				EndIf
				

			; numérotation du journal	(on le recharge en cas de modif entre temps par un autre prog
			Default	
				CogRs_Jnl.Init()
				CogRs_Jnl.Where.PK(CD.Cog_CesJnl)
				If CogRs_Jnl.Select() = 0
					Cog_EcritureLivreDeBord("Journal " & CogRs_Jnl.Jnl & " non trouvé.", applic='DCPT')
					FReturn(0)
				EndIf
				If Cog_Resa_RSQL("CogRs_Jnl", Formater_Res('C3C4') & CogRs_Jnl.Dos & CogRs_Jnl.Jnl, 'R')	= 0
					CogRs_Jnl.Piece = Condition(CogRs_Jnl.Piece <> 0, CogRs_Jnl.Piece + 1, CogRs_Jnl.Cog_PieceD + 1)
					CogRs_Jnl.Update()
					Cog_Resa_RSQL("CogRs_Jnl", Formater_Res('C3C4') & CogRs_Jnl.Dos & CogRs_Jnl.Jnl, 'L')
					wPiece = CogRs_Jnl.Piece
					FReturn(1)
				Else
					Cog_EcritureLivreDeBord("Journal " & CogRs_Jnl.Jnl & " réservé.", applic='DCPT')
					FReturn(0)
				EndIf

				
		EndSwitch

	Else	; non besoin de renseigner une numérotation 
	 	wPiece= 0
		wRet	= 1
	EndIf

	FReturn(wRet)

EndF


;*
;	Traitements
;*

;*
Procedure Cog_WriteC0_CCFM
;
BeginP

	C0.CE1	= 0
	C0.CE2	= ' '
	C0.CE3	= ' '
	C0.CE4	= ' '
	C0.CE5	= ' '
	C0.CE6	= ' '
	C0.CE7	= ' '
	C0.CE8	= ' '
	C0.CE9	= ' '
	C0.CEA	= ' '
	C0.Dos	= CA.Dos
	C0.Dev	= CA.Dev

	Hwrite(CCFM, C0)

EndP

;*
Procedure Cog_WriteCX_CCFM
;

1		i		1,0

BeginP

	init Cx		=' '
	CX.Ce1		='2'	
	CX.Dos		=C8.Dos
	CX.EcrNo		=C8.EcrNo
	CX.Dev		=C8.Dev
	CX.MtDev		=C8.MtDev
	CX.Mt			=C8.Mt
	CX.Etb		=C8.Etb
	cx.Sens		=C8.Sens
	for i=1 to 4
		CX.Axe(i)	= CogRs_MOUV.Axe(i)
	next

	Hwrite(CCFM,CX)	

EndP

;*
Procedure Cog_WriteC8_CCFM(wCpt, wSens, wMt)
;	Informations lues sur CogRs_I1 

1		wCpt		>ccfdd.dhsd		Cpt  	; compte à CREDITER, le swap pour le debit 
1		wSens		>ccfdd.dhsd		Sens
1		wMt		>ccfdd.dhsd		Mt
1		i			1,0

BeginP

	C8 			= system.esp 
	C8.dos 		= Mz.Dos
	C8.Etb		= CogRs_I1.Etb	
	C8.piece  	= numeroPiece			
	C8.ce1 		= '8'												;CE1	= 8
	C8.ce2 		= '1'												;CE2	= 1 si comptable= 2 si extra-comptable= 3 si budget= 4 si modèle
	C8.ce3 		= '1'												;CE3	= 1 si en brouillard= 2 si validée
	C8.ce4 		= '1'												;CE4	= 1 si non lettré= 2 si lettré= espace si Non lettrable
	C8.ce5 		= '1'												;CE5	= 1 si non pointé= 2 si pointé= espace si Non pointable
	;C8.Ce6		= Condition(C8.Piece <> ' ', '1', ' ')	;CE6	= 1 si le numéro de pièce est renseigné= espace sinon
	; les enregistrements C8, CX et CP ne devront pas avoir de CE6 positionné afin de ne pas être considérés comme des intitulés.
	C8.Ce7		= ' '												;CE7	= 1 si ligne est une ligne de centralisation= 2 si ligne est une ligne détail de cent= 3 si ligne signale une pseudo-cent= espace si ligne n'est ni cent, ni une ligne de cent
	C8.Ce8		= ' '												;CE8	= 1 si écriture d'abonnement= 2 si écriture liée à un abonnement (charge réelle)= espace sinon
	C8.Ce9		= ' '												;CE9	= 1 si pointée avec une ligne d'extrait= espace sinon
	C8.CeA		= Condition(C8.Etb <> ' ', '1', ' ')	;CEA	= 1 si la ligne est rattachée à un établissement= espace sinon
	C8.CeB		= Condition(C8.Etb <> ' ', '1', ' ')	;CEB	= 1 si non lettré et rattaché à un établissement= 2 si lettré et rattaché à un établissement= espace sinon
	C8.CeC		= Condition(C8.Etb <> ' ', '1', ' ')	;CEC	= 1 si non pointé et rattaché à un établissement= 2 si pointé et rattaché à un établissement= espace sinon
	C8.CeD		= Condition(C8.Etb <> ' ' AND C8.Piece <> ' ', '1', ' ')	;CED	= 1 si le numéro de pièce est renseigné et si rattaché à un établissement= espace sinon
	C8.CeE		= ' '												;CEE	= 1 si le compte collectif est renseigné= espace sinon
	C8.CeF		= ' '												;CEF	= 1 si le compte collectif est renseigné et si rattaché à un établissement= espace sinon
	C8.CeG		= ' '												;CEG	= 1 si écriture possède des liens R2C8 dans Divalto Règlements= espace sinon
	C8.CeH		= Condition(C8.Ce3 = 2 AND C8.Etb <> ' ', '1', ' ')		;CEH	= 1 si écriture validée et rattachée à un établissement= espace sinon
	C8.cpt   	= wCpt
	C8.cp	   	= ' '												; Pas de contrepartie
	C8.ecrdt  	= XQ.EcrDt1									
	C8.ecrdt  	= Condition(C8.ecrdt <= CD.ExoFDt AND C8.EcrDt >= CD.ExoDDt, C8.ecrdt, CD.ExoFDt) 	; vérification que la date du jour est comprise dans la période de validation
	C8.lib    	= "Fiche immobilisation n°" & nospaces(CogRs_I1.Immo)
	C8.jnl    	= CD.Cog_CesJnl
	C8.Pinotiers= ""
	C8.usercrdh = Time(7)
	C8.usercr 	= System.User
	C8.cenote   = 1
	C8.sens 		= 2
	C8.usercrori= 2			; Multichoix -> 2=Intégration
	C8.Dev 		= CA.Dev
	C8.Mt  		= wMt
	C8.MtDev		= wMt			; obligatoirement dans la devise du dossier
	C8.Sens		= wSens

	For i=1 to 6
		C8.VtlCod(i) = 1		; Présence ventilation (=1 si Non ; =2 si Oui)	1,0*6
	Next
	If CogRs_MOUV.Axe(*)<>' '
		ecrNo++
		C8.EcrNo = ecrNo
	  for i=1 to 4
			C8.VtlCod(i)=condition(CogRs_MOUV.Axe(i)<>' ',2,1)
		next
	endif

	HWrite(CCFM, C8)

	
	If CogRs_MOUV.Axe(*)<>' '
		Cog_WriteCX_CCFM	
	EndIf

EndP

;*
Function int Cog_GenererEcrituresCession
;	Travaille sur CogRs_I1
;	Vérification des données
;	Chargement des records C8
; 	Ecriture dans le CCFM et appel de l'intégrateur
;	0 --> écriture rejetée
;	1 --> écriture OK
1		wErr			8,0
1		integration	1,0 = 0
1		i				1,0
BeginF

	If not Cog_FiltresOk
		FReturn(0)
	EndIf

	; comptes
	If CogRs_I1.Cog_CptCes 		= ' ' 
		CogRs_I1.Cog_CptCes 		= CogRs_C3Ces.Cpt	
	EndIf
	If CogRs_I1.Cog_CptCesVal	= ' ' 
		CogRs_I1.Cog_CptCesVal	= CogRs_C3CesVal.Cpt
	EndIf 
	If CogRs_I1.Cog_CptCesAmo	= ' ' 
		CogRs_I1.Cog_CptCesAmo	= CogRs_C3CesAmo.Cpt
	EndIf

	
	;
	HErase(CCFM)

	If not Cog_Attribuer_Numerotation(numeroPiece)
		FReturn(0)
	EndIf

	Cog_WriteC0_CCFM	

	;
	;11/2017 - VR - Initialisation des axes analytiques avec les informations des biens et des axe sur comptes comptables - Modif faite pour les 3 comptes
	CogRs_MOUV.Axe(1) = Condition(CogRs_C3CesVal.AxeSais(1)=2,  CogRs_I1.Axe(1), '')
	CogRs_MOUV.Axe(2) = Condition(CogRs_C3CesVal.AxeSais(2)=2,  CogRs_I1.Axe(2), '')
	CogRs_MOUV.Axe(3)	= Condition(CogRs_C3CesVal.AxeSais(3)=2,	CogRs_C3CesVal.Axe(3), '')
	CogRs_MOUV.Axe(4)	= Condition(CogRs_C3CesVal.AxeSais(4)=2,	CogRs_C3CesVal.Axe(4), '')
	Cog_WriteC8_CCFM(CogRs_I1.Cog_CptCesVal, C_SENS_DEBIT, CogRs_I1.EcoResMt)	; Débit: Valeur cpt des éléments actifs cédés	 
	
	;
	CogRs_MOUV.Axe(1) = Condition(CogRs_C3CesAmo.AxeSais(1)=2,  CogRs_I1.Axe(1), '')
	CogRs_MOUV.Axe(2) = Condition(CogRs_C3CesAmo.AxeSais(2)=2,  CogRs_I1.Axe(2), '')
	CogRs_MOUV.Axe(3)	= Condition(CogRs_C3CesAmo.AxeSais(3)=2,	CogRs_C3CesAmo.Axe(3), '')
	CogRs_MOUV.Axe(4)	= Condition(CogRs_C3CesAmo.AxeSais(4)=2,	CogRs_C3CesAmo.Axe(4), '')
	Cog_WriteC8_CCFM(CogRs_I1.Cog_CptCesAmo, C_SENS_DEBIT, CogRs_I1.EcoTotMt)	; Débit: Amortissement des immobilisations
	
	;
	CogRs_MOUV.Axe(1) = Condition(CogRs_C3Ces.AxeSais(1)=2,  CogRs_I1.Axe(1), '')
	CogRs_MOUV.Axe(2) = Condition(CogRs_C3Ces.AxeSais(2)=2,  CogRs_I1.Axe(2), '')
	CogRs_MOUV.Axe(3)	= Condition(CogRs_C3Ces.AxeSais(3)=2,	CogRs_C3Ces.Axe(3), '')
	CogRs_MOUV.Axe(4)	= Condition(CogRs_C3Ces.AxeSais(4)=2,	CogRs_C3Ces.Axe(4), '')
	Cog_WriteC8_CCFM(CogRs_I1.Cog_CptCes, C_SENS_CREDIT, CogRs_I1.EcoBas)		; Crédit: Base d'amortissement		 

	;
	Hclose(CCFM)
	wErr = 0	
	Pinglocal('ZONEMZ',MZ)
	MZ.Param = "1"						; si erreur ne rien importer , marche avec le ccut029
	Ping('SIMUL',MZ.Param)
	integration = FALSE
	If C3_Integration(CCFM.Name)
		PinglocalReceiveAndDelete('ZONEMZ',MZ)
		If Pongreceive("erreurs",wErr) = 0 and wErr > 0
			; rejet des écritures - tracé en standard dans le livre de bord	
		Else
			integration = TRUE
		EndIf
	Else
		Cog_EcritureLivreDeBord("Echec de l'appel du programme d'intégration comptable.", applic='DCPT')
	EndIf

	;
	Hopen(CCFM,"R")

	FReturn(integration)

EndF

;*
Procedure Cog_LectureBiensCession
;
1		i		1,0
BeginP

	Cog_EcritureLivreDeBord(translate("--> Début de génération des écritures de cession"), applic='DCPT')

	erreur = 0
	compteur = 0
	ecrNo		= 0
	; Ajustement des bornes
	If XQ.EchDt1 = ' '
		XQ.EchDt1 = '19000101'
	EndIf
	If XQ.EchDt2 = ' '
		XQ.EchDt2 = '99991231'
	EndIf

	; Lecture des immo et constitution de la liste mémoire
	CogRs_I1.Init()
	CogRs_I1.Where.RemoveCondition("")
	CogRs_I1.Join.Deactivate("$All")
	readerI1 = CogRs_I1.ReaderOpen()
	CogRs_I1.Where.Fourchette_Etat(C_ETAT_BIEN_VENDU, C_ETAT_BIEN_REBUT) 
	CogRs_I1.Where.AddCondition("Fourchette_Etat")
	CogRs_I1.Where.Fourchette_Cession(XQ.EchDt1, XQ.EchDt2)
	CogRs_I1.Where.AddCondition("Fourchette_Cession")
	CogRs_I1.Where.Ecr_Cession_Non_Generees()
	CogRs_I1.Where.AddCondition("Ecr_Cession_Non_Generees")
	CogRs_I1.Where.BetWeen_Immo(XQ.Immo1, XQ.Immo2)
	CogRs_I1.Where.AddCondition("BetWeen_Immo")
	Cogrs_I1.Where.IndicateurHistorique('1')
	CogRs_I1.Where.AddCondition("IndicateurHistorique")
	CogRs_I1.ReaderSelect(readerI1)

	Do While CogRs_I1.ReaderNext(readerI1) > 0

		XQ.WinTitre = "Génération des écritures"
		Cog_AfficherTraitement

		If Cog_Resa_RSQL("CogRs_I1", Formater_Res('C3I1') & CogRs_I1.Dos & CogRs_I1.Immo, 'R') = 0

			; chargement du mouv nécessaire pour lecture des axes analytiques
			If CogRs_MOUV.Dos <> CogRs_I1.Dos OR CogRs_MOUV.EnrNo <> CogRs_I1.Cog_EnrNo
				CogRs_MOUV.Init()
				CogRs_MOUV.Join.Deactivate("$All")
				CogRs_MOUV.Where.PK(CogRs_I1.Cog_EnrNo)
				CogRs_MOUV.Select() 
			EndIf

			If Cog_GenererEcrituresCession
				CogRs_I1.Cog_CesEcrFlag = 2
				CogRs_I1.ReaderUpdate(readerI1)
				compteur++
			Else
				erreur++			
			EndIf
			Cog_Resa_RSQL("CogRs_I1", Formater_Res('C3I1') & CogRs_I1.Dos & CogRs_I1.Immo, 'L')
		Else
			Cog_EcritureLivreDeBord("Fiche de bien n°" & CogRs_I1.Immo & " réservée.", applic='DCPT')
			erreur++
		EndIf

	WEnd

	CogRs_I1.ReaderClose(readerI1)

	xmeret

	Cog_EcritureLivreDeBord(translate("<-- Fin de génération des écritures de cession"), applic='DCPT')

endp


;*
;	Saisie des pages du masque
;*

;* Saisie du masque page 1
public procedure Cog_SaisiePage1
1 fin		1,0	= 0

beginp

	xmeinput(mz.mecle,1,0,xme_mode_goto)

	do
	                                
		switch harmony.key            ;tests des causes de l'interruption
	
		case harmony.dataarret = 8002
			if Harmony.Sourisbout = Right_Button
				Zoom_Call()
			elsif Harmony.Sourisclic = Double_Click
				Harmony.Retour = Xmenext_Simulation_Touche
				Harmony.Cplretour = k_f8
			endif
		
		case k_f7                ;zoom généralisé
			Zoom_Call()
		
		case k_f8                ;zooms
			Zoom_Call(harmony.arret)
	
		case k_f9                ;abandon
			fin = 1
	
		case vsw in (k_f10,k_tab,k_return,k_down)
			if messagebox(translate("Générer les écritures de cession?"),translate("Confirmation"),mb_yesno+mb_iconquestion)=idyes
				
				G3_OpenTrace(2,3,4)
				Cog_LectureBiensCession
				G3_CloseTrace

				txtMSG = "Traitement terminé."
				if erreur
					txtMSG &= "|Des erreurs ont été détectées.|Consultez le livre de bord"
				endif
				txtMSG &= "|" & nospaces(compteur) & " fiche(s) de bien traitée(s) avec succès."
				MessageBox(txtMSG, "Information", MB_ICONINFORMATION)
	
				fin=1
	
			endif

		endswitch

	while fin = 0         ;suite de la saisie
		xmenext(harmony.retour,harmony.cplretour)
	wend
		
endp


;*
;	Programme principal
;*
main
	
	if pingreceive("ccxq_cog",XQ) = 0
		tunnel	= true
	endif

	if Cog_InitialiserVariables

		if not tunnel
	
			GetAdressProcedure(mz.MtCle,"ChargementAvant",AdrProc)
			procedurecall(AdrProc)
			Cog_SaisiePage1
	
		else	;programme piloté
	
			Cog_LectureBiensCession
	
		endif

	endif
