SetModuleInfo('$Id$')
;*
;*		COGESER  Interface d'exportation des écritures comptables à partir de DIVALTO Comptabilité
;*

;*		Log	 Version	  NPmodif		Date		Modifications
;*
;*		JDT		6.1			01			06.2009	Version initiale
;*		RB			6.3			02			08.2011	Format U GIE IRIS

OverWrittenBy "COGuCC_EXPORT_ECR.dhop"

;
Include	"gtTCz00.DHSP"

;
Module	"CCPMFIC.DHOP"
Module	"Cogtm_ecr_exp.dhop"
Module	"CogTm_000.dhop"

; Fichiers
Public HFile	GTFDD.DHSD	GTFDOS		GTFDOS_DEV_01			; Dossier Etablissement
Public HFile	GTFDD.DHSD	GTFENT		GTFENT_DEV_01			; En tête de pièce
Public HFile	GTFDD.DHSD	GTFPCF		GTFPCF_DEV_01			; Tiers
Public HFile	CCFDD.DHSD	CCFECR		CCFECR_DEV_01			; Ecritures
Public HFile	CCFDD.DHSD	CCFJCA		CCFJCA_DEV_01			; Intitulés
Public HFile	CCFDD.DHSD	CCFVTL		CCFVTL_DEV_01			; Imputations et ventilations

;
Public RecordSQL	"COG_CCRSECR.DHOQ"	CogRs_C8					; Non utilisation du STD car BIND
Public RecordSQL	"CCRSVTL.DHOQ"	 		VTLAXE			CogRs_CX
Public RecordSQL	"CCRSJCA.DHOQ"			Journal			CogRs_JNL
Public RecordSQL	"GTRSPPPROJ.DHOQ"		Affaire			CogRs_PrjAp

; Enregistrements
Public Record	GTFDD.DHSD	SOC		SOC_DEV01					; Société
Public Record	GTFDD.DHSD	SOC		SOC							; Société
Public Record	GTFDD.DHSD	ETS		ETS_DEV01					; Etablissement
Public Record	GTFDD.DHSD	ETS		ETS							; Etablissement
Public Record	GTFDD.DHSD	ENT		ENT_DEV_01					; En tête de pièce
Public Record	GTFDD.DHSD	CLI		CLI_DEV_01					; Client
Public Record	GTFDD.DHSD	FOU		FOU_DEV_01					; Fournisseur
Public Record	CCFDD.DHSD	C3			C3_DEV_01					; Plan comptable
;Public Record	CCFDD.DHSD	C4			C4_DEV_01					; Journaux
;Public Record	CCFDD.DHSD	C8			C8_DEV_01					; Ecritures
Public Record	CCFDD.DHSD	CX			CX_DEV_01					; Ventilation sur les axes
Public Record	CCFDD.DHSD	CP			CP_DEV_01					; Ventilation sur les pièces et les échéances
public record  ccfdd.dhsd	ca			CA

Public Record	GTFDD.DHSD	XZ			G3XZ
Public Record	GTFDD.DHSD	XQ			XQ							; Jobqueue
Public Record	A5DD.DHSD	MZ			MZ
Public Record	DDSYS.DHSD	Implicite Implicite
Public Record	* HTDF		TDF_01							; table définition fichier
Public Record	* HTDF		TDF_02							; table définition fichier
 
;		
1	FicNom01		255 = " "
1	FicNom02		255 = " "
1	s_datetrait	S
1	d_datetrait	>GTFDD.DHSD UserCrDh
1	x_user		>GTFDD.DHSD UserCr
1	x_st_00		X
1	readC8		L
1	readCX		L
1	list_EcrVtl	L
1	fonc_EcrVtl	16
1	lig_VTL_Mt	>CCFDD.dhsd	mt

structure Ventilation
	1	Axe1		>	gtfdd.dhsd	axe
	1	Axe2		>	gtfdd.dhsd	axe
	1	Axe3		>	gtfdd.dhsd	axe
	1	Axe4		>	gtfdd.dhsd	axe
	1	Mt			>	ccfdd.dhsd	mt
	1	Sens		>	ccfdd.dhsd	sens
	1	Jnl		>	ccfdd.dhsd	jnl
	1	Ecrno		>	ccfdd.dhsd	ecrno
	1	Ecrlg		>	ccfdd.dhsd	ecrlg
endstructure

RecordDiva	Ventilation	Vtl
RecordDiva	Ventilation	Vtl_Rec



;*
;*
;*

;*
Function Long CompareEcrVtl(&elem1,&elem2)
recorddiva	Ventilation	elem1
recorddiva	ventilation	elem2

1	cle1		S
1	cle2		S

Beginf

	cle1	=	elem1.Axe1 & elem1.Axe2 & elem1.Axe3 & elem1.Axe4
	cle2	=	elem2.Axe1 & elem2.Axe2 & elem2.Axe3 & elem2.Axe4

   freturn(sortcompare(cle1,cle2))

Endf 

;*
Public Function char COGF_CheminImplicites(s_implicite)
; Variables
1 s_implicite	>DDSYS.DHSD		Path	; Chemin implicte recherché

1 l_Impl L			; liste pour les implicites

1 l_st0	l
1 l_st1	l

BeginF
	l_Impl = ListImplicitesGet	; Récupération des chemins implicites
	ListBegin(l_Impl)				; Début de implicites
	; Recherche de l'implicite contenant le mot passé en paramétre
	Do
		l_st0 = ListNext(l_Impl, Implicite)
	While	l_st0 not in (0,-1)
		l_st1 = String(FString("U",s_implicite) , FString("U",Implicite.Path))
		If l_st1	>0
			; Recherche du fichier contenant le préfixe passé en paramètre
			l_st1 = l_st1-1
			s_implicite = FString("U",Mid(Implicite.Path,1,l_st1)) & FString("U",Left(s_implicite)) ;& "/"
			FReturn(s_implicite)
		EndIf
	Wend
	l_Impl = ListImplicitesGet	; Récupération des chemins implicites
	ListBegin(l_Impl)				; Début de implicites
	l_st0 = ListNext(l_Impl, Implicite)
	FReturn(FString("U",Implicite.Path))
EndF

;*
Function int Cog_FiltresOK
;	Filtres sur les journaux
;	1 --> OK
BeginF

	; 
	If CogRs_JNL.Cog_ExportAnael <> 2	
 		FReturn(FALSE)
	EndIf

	;


	FReturn(TRUE)
EndF

;*	01
Public Function char COGF_ExportationEcritures(t_CheminFichier, t_Dos, t_Export, t_ChronoD, t_ChronoF, t_SeparateurC, t_SeparateurL, t_Jnl, t_CX, t_OA, t_AnaJnl)
;
1	t_CheminFichier	255
1	t_NomFichier		255
1	t_NomFichier_SAUV	255
1	t_Dos					>GTFDD.DHSD	Dos
1	t_Export				1,0					; 1 : Exportation, 2 : Réexportation
1	t_ChronoD			>CCFDD.DHSD	COG_CHRONO
1	t_ChronoF			>CCFDD.DHSD	COG_CHRONO
1	t_SeparateurC		8						; Séparateur champ
1	t_SeparateurL		8						; Séparateur ligne
1	t_Jnl					>CCFDD.DHSD	JNL		=		''
1	t_CX					1,0						= FALSE
1	t_OA					2,0						= 0			; forcer origine appel (voir fonction générer ligne)
1	t_AnaJnl				1,0						= FALSE

1	t_Ce1_01				>CCFDD.DHSD	Ce1
1	t_Key_01				255
1	x_st_01				X
1	t_Ce1_02				>CCFDD.DHSD	Ce1
1	t_Key_02				255
1	x_st_02				X

1	t_Chrono				>CCFDD.DHSD	COG_CHRONO
1	t_TiCod				>GTFDD.DHSD	TiCod
1	t_Ligne				2000
1	t_datD				>GTFDD.DHSD	USERCRDH

1	t_first				1,0	= true
1	t_lilg				4,0	= 0
1	t_ecrno				>CCFDD.DHSD	ecrno	= 0

1	a_numfic				1

BeginF

	;*
	; RESA - Pour éviter doublon de chrono
	;*
	t_datD = time(7)
	Do While CogRs_C8.FShare([MZ.Dos "COG_EXPORT_ANAEL"], 'R') <> 0  
		If SecondsBetweenDH(t_datD, time(7)) > 60
			Cog_EcritureLivreDeBord("Timeout réservation pour l'export Anael")
			FReturn("")
		EndIf
	WEnd

	;*
	; Initialisation
	;*
	If s_datetrait = " " 
		d_datetrait = Time(7)																															 
		s_datetrait = Mid(d_datetrait,7,2) & "/" & Mid(d_datetrait,5,2) & "/" & Mid(d_datetrait,1,4) & "-" & Mid(d_datetrait,9,2) & ":" &	Mid(d_datetrait,11,2) & ":" & Mid(d_datetrait,13,2)
		s_datetrait = Fstring("0", s_datetrait)
	EndIf

	;*
	;initialisation des listes
	;*
	if (list_EcrVtl := listcreate) = 0
		Cog_EcritureLivreDeBord("Erreur lors de la création de la liste des écritures analytiques à exporter")
		FReturn("")
	endif
	GetAdressFunction("","CompareEcrVtl",fonc_EcrVtl)
	ListMode(list_EcrVtl,1,fonc_EcrVtl) 

	;*
	; Création du fichier TXT
	;*
	; Le chemin du fichier est passé en paramètre dans la variable t_CheminFichier
	t_NomFichier = Left(t_CheminFichier) & "/COMPTA-" & left(t_Jnl) & Left(d_datetrait) & ".TXT"
	t_NomFichier_SAUV = Left(t_CheminFichier) & "/SAUV/COMPTA-" & left(t_Jnl) & Left(d_datetrait) & ".TXT"
	; 1° test de l'existance du fichier.
	TDF_01.Name = t_NomFichier
	TDF_02.Name = t_NomFichier_SAUV
	If FOpen(TDF_01) = 0 
		FClose(TDF_01)
		; Déplacement du fichier dans le répertoire sauvegarde
		TDF_02.Name = Left(TDF_02.Name) & ".OLD"
		x_st_01 = HCopyFile(TDF_01.Name, TDF_02.Name,,,,a_numfic)
		If x_st_01 <> 0
			t_ligne = "  - ERREUR : le fichier " & Left(t_NomFichier) & " existe déjà. -  "
			G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
			Display Left(t_ligne)
			t_ligne = "  - Fin de programme -  "
			G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
			Display Left(t_ligne)
			CogRs_C8.FShare([MZ.Dos "COG_EXPORT_ANAEL"], 'L')
			FReturn(" ")
		EndIf
		; Suppression de l'original
		x_st_01 = HDeleteFile(t_NomFichier,x_st_01,,FALSE)
		If x_st_01 <> 0
			t_ligne = "  - ERREUR : le fichier " & Left(t_NomFichier) & " existe déjà. -  "
			G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
			Display Left(t_ligne)
			t_ligne = "  - Fin de programme -  "
			G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
			Display Left(t_ligne)
			CogRs_C8.FShare([MZ.Dos "COG_EXPORT_ANAEL"], 'L')
			FReturn(" ")
		EndIf
	EndIf
	; 2° Création du fichier
	x_st_01 = HCreateFile(Left(TDF_01.Name),"U",,False)
	If x_st_01 <> 0
		t_ligne = "  - ERREUR : le fichier " & Left(t_NomFichier) & " n'a pas pu être initialisé. -  "
		G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
		Display Left(t_ligne)
		t_ligne = "  - Fin de programme -  "
		G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
		Display Left(t_ligne)
		CogRs_C8.FShare([MZ.Dos "COG_EXPORT_ANAEL"], 'L')
		FReturn(" ")
	EndIf
	; La fonction Hopen permet d'ouvrir un fichier "à la main".
	HOpen(TDF_01,"R")
	; Herase efface le contenu du fichier.
	HErase(TDF_01)

	 	
	;*
	; Recherche du dernier numéro d'exportation
	;*

	IF CA.Dos <> t_dos
		seek_ca(t_dos)
	EndIf
	
	CogRs_C8.Init()
	CogRs_C8.Where.RemoveCondition("")
	CogRs_C8.Where.Max_Chrono()
	If CogRs_C8.Select() > 0 AND CogRs_C8.COG_CHRONO > 0
		t_Chrono = CogRs_C8.COG_CHRONO + 1
	Else
		t_Chrono = "10000000"
	EndIf

	;*
	; Boucle sur les écritures
	;*

	; initialisation requete
	CogRs_C8.Init()
	CogRs_C8.Where.RemoveCondition("")
	readC8 = CogRs_C8.ReaderOpen()
	If t_Export = 1
		CogRs_C8.Where.Equal_Chrono(0)
		CogRs_C8.Where.AddCondition("Equal_Chrono")
	ElsIf t_Export = 2
		CogRs_C8.Where.Between_Chrono(t_ChronoD, t_ChronoF)
		CogRs_C8.Where.AddCondition("Between_Chrono")
	EndIf
	If t_Jnl <> ' '
		CogRs_C8.Where.Equal_Jnl(t_Jnl)
		CogRs_C8.Where.AddCondition("Equal_Jnl")
	EndIf
	CogRs_C8.ReaderSelect(readC8)

	Do While CogRs_C8.ReaderNext(readC8) > 0
		
		;*
		; Lecture des autres tables
		;*
		; Compte comptable
		t_Ce1_02 = "3" 
		if hseek(ccfjca_dev_01,c3_dev_01,"A" & CogRs_C8.Dos & t_Ce1_02 & CogRs_C8.Cpt)
			C3_DEV_01	= ""
		endif

		; Journaux
		;t_Ce1_02 = "4" 
		;if hseek(ccfjca_dev_01,C4_DEV_01,"D" & CogRs_C8.Dos & t_Ce1_02 & CogRs_C8.Jnl)
		;	C4_DEV_01	= ""
		;endif
		If CogRs_JNL.Jnl <> CogRs_C8.Jnl OR CogRs_JNL.Dos <> CogRs_C8.Dos
			CogRs_JNL.Init()
			CogRs_JNL.Where.Zoom_PK(CogRs_C8.Jnl)
			CogRs_JNL.Select()
		EndIf


		; Recherche du type de tiers
		Switch CogRs_JNL.JnlTyp
			Case 1 ; Achat
				t_TiCod = "F"
			Case 2 ; Vente
				t_TiCod = "C"
			Default
				t_TiCod = " "
		EndSwitch

		; En-tête de pièce
		GTFENT_DEV_01.Key = "I" & CogRs_C8.Dos & t_TiCod & "4" & CogRs_C8.Piece
		t_Key_02 = CogRs_C8.Dos & t_TiCod & "4" & CogRs_C8.Piece
		x_st_02 = IRead(GTFENT_DEV_01, ENT_DEV_01, "I", t_Key_02)
		If x_st_02 = 0 And ENT_DEV_01.Dos = CogRs_C8.Dos And ENT_DEV_01.TiCod = t_TiCod And ENT_DEV_01.PiCod = "4" And ENT_DEV_01.PiNo = CogRs_C8.Piece
			ENT_DEV_01
		Else
			Init ENT_DEV_01 = " "
		EndIf

		; Tiers (client ou fournisseur)
		Switch t_TiCod
			Case "C" ; Client
				t_Ce1_02 = "3"
				GTFPCF_DEV_01.Key = "C" & CogRs_C8.Dos & t_Ce1_02 & ENT_DEV_01.Tiers
				t_Key_02 = CogRs_C8.Dos & t_Ce1_02 & ENT_DEV_01.Tiers
				x_st_02 = IRead(GTFPCF_DEV_01, CLI_DEV_01, "C", t_Key_02)
				If x_st_02 = 0 And CLI_DEV_01.Dos = CogRs_C8.Dos And CLI_DEV_01.Ce1 = t_Ce1_02 And CLI_DEV_01.Tiers = ENT_DEV_01.Tiers
					CLI_DEV_01	
				Else
					Init CLI_DEV_01 = " "	 
				EndIf
			Case "F" ; Fournisseur
				t_Ce1_02 = "4" 
				GTFPCF_DEV_01.Key = "C" & CogRs_C8.Dos & t_Ce1_02 & ENT_DEV_01.Tiers
				t_Key_02 = CogRs_C8.Dos & t_Ce1_02 & ENT_DEV_01.Tiers
				x_st_02 = IRead(GTFPCF_DEV_01, FOU_DEV_01, "C", t_Key_02)
				If x_st_02 = 0 And FOU_DEV_01.Dos = CogRs_C8.Dos And FOU_DEV_01.Ce1 = t_Ce1_02 And FOU_DEV_01.Tiers = ENT_DEV_01.Tiers
					FOU_DEV_01	
				Else
					Init FOU_DEV_01 = " "	 
				EndIf
			Default
				Init CLI_DEV_01 = " "
				Init FOU_DEV_01 = " "
		EndSwitch

		;*
		;	Filtres
		;*
		if Cog_FiltresOK

			;*
			; Enregistrement du numéro chrono uniquement en cas de nouvel export
			;*
			If t_Export = 1 And CogRs_C8.COG_CHRONO = " "
				CogRs_C8.COG_CHRONO = t_Chrono
				CogRs_C8.Cog_ExpDt	= today
				If CogRs_C8.FShare(Formater_Res('C3C8')  & CogRs_C8.Dos & CogRs_C8.EcrNo, 'R') <> 0
					t_ligne = "  - ERREUR : l'enregistrement du numéro chrono " & Left(t_Chrono) & " sur l'écriture comptable numéro " & Left(CogRs_C8.EcrNo) & " a échoué.  -  "
					G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
					Display Left(t_ligne)
				Else
					CogRs_C8.ReaderUpdate(readC8)
					CogRs_C8.FShare(Formater_Res('C3C8')  & CogRs_C8.Dos & CogRs_C8.EcrNo, 'L')
				EndIf
			EndIf

			; Ecriture dans le fichier
			Cog_GenererLigne(t_ligne,t_SeparateurC,t_SeparateurL,condition(xq.Choix(4)=2,true,false), CogRs_C8.C8,"", Condition(t_OA > 0, t_OA, 4))
			x_st_02 = FWritSt(TDF_01, Left(t_ligne))
	
		 	;on prépare le cumul des ventilations analytiques
			CogRs_CX.Init()
			CogRs_CX.Where.RemoveCondition("")
			readCX = CogRs_CX.ReaderOpen()
			CogRs_CX.Where.Zoom_EcrNo(CogRs_C8.EcrNo)
			CogRs_CX.Where.AddCondition("Zoom_EcrNo")
			CogRs_CX.Where.Zoom_EcrLg(CogRs_C8.EcrLg)
			CogRs_CX.Where.AddCondition("Zoom_EcrLg")
			CogRs_CX.ReaderSelect(readCX)
			
			Do while CogRs_CX.ReaderNext(readCX) > 0

				if t_first
					t_first	= false
					t_ecrno	= CogRs_CX.EcrNo
					t_lilg	= 1
				endif
				
				Vtl_rec			= ""
				Vtl_rec.Axe1	= CogRs_CX.Axe(1)
				Vtl_rec.Axe2	= CogRs_CX.Axe(2)
				Vtl_rec.Axe3	= CogRs_CX.Axe(3)
				Vtl_rec.Axe4	= CogRs_CX.Axe(4)
				Vtl_rec.Jnl		= Condition(t_AnaJnl AND CA.Cog_AnaJnl <> ' ' , CA.Cog_AnaJnl, CogRs_CX.Jnl)
				Vtl_rec.Ecrno	= t_EcrNo
				Vtl_rec.Ecrlg	= t_lilg

				; Transcodification axe anael
				IF CogRs_JNL.Cog_AnaelTranscod = 2
					CogRs_PrjAp.Init()
					CogRs_PrjAp.Where.PK(CogRs_CX.Axe(2))
					If CogRs_PrjAp.Select()
					 	Vtl_Rec.Axe2 = CogRs_PrjAp.Cog_AxeAnael
					EndIF

				EndIf
				
				if listseek(list_EcrVtl,Vtl_rec,Vtl)
					
					CogRs_CX.mtbis=abs(CogRs_CX.mt)
					Vtl.Mt	+= condition(CogRs_CX.cog_sens=2,CogRs_CX.Mtbis,-CogRs_CX.Mtbis)
					
					if vtl.mt<0
						vtl.sens=1
					else
						vtl.sens=2
					endif
					lig_vtl_mt=vtl.mt
					listmodify(list_EcrVtl,Vtl)
				else
					Vtl		= Vtl_rec
					CogRs_CX.mtbis=abs(CogRs_CX.mt)
					Vtl.Mt	= condition(CogRs_CX.cog_sens=2,CogRs_CX.Mtbis,-CogRs_CX.Mtbis)
					if vtl.mt<0
						vtl.sens=1
					else
						vtl.sens=2
					endif
					lig_vtl_mt=vtl.mt
					listinsert(list_EcrVtl,Vtl)
					t_lilg++
				endif

				;mise à jour du cumul sur les axes 999999
 				Vtl_rec			= ""
				
				Vtl_rec.Axe1	= "999999"
				Vtl_rec.Axe2	= "999999"
				Vtl_rec.Axe3	= CogRs_CX.Axe(3)
				Vtl_rec.Axe4	= CogRs_CX.Axe(4)
				Vtl_rec.Jnl		= Condition(t_AnaJnl AND CA.Cog_AnaJnl <> ' ' , CA.Cog_AnaJnl, CogRs_CX.Jnl)
				Vtl_rec.Ecrno	= t_EcrNo
				Vtl_rec.Ecrlg	= t_lilg
				if listseek(list_EcrVtl,Vtl_rec,Vtl)
					Vtl.Mt	+= condition(CogRs_CX.Sens=2,CogRs_CX.Mt,-CogRs_CX.Mt)
					if vtl.mt<0
						vtl.sens=2
					else
						vtl.sens=1
					endif
					listmodify(list_EcrVtl,Vtl)
				else
					Vtl		= Vtl_rec
					Vtl.Mt	= condition(CogRs_CX.Sens=2,CogRs_CX.Mt,-CogRs_CX.Mt)
					if vtl.mt<0
						vtl.sens=2
					else
						vtl.sens=1
					endif
					listinsert(list_EcrVtl,Vtl)
					t_lilg++
				endif
			WEnd

			CogRs_CX.ReaderClose(readCX)

		endif
	Wend

	CogRs_C8.ReaderClose(readC8)

	;*
	; ;Export de l'analytique
	;*
	If t_CX
		ListBegin(list_EcrVtl)
		Do While ListNext(list_EcrVtl,Vtl) not in (-1, 0)
	
			CX_DEV_01			= ""
			CX_DEV_01.Axe(1)	= Vtl.Axe1
			CX_DEV_01.Axe(2)	= Vtl.Axe2
			CX_DEV_01.Axe(3)	= Vtl.Axe3
			CX_DEV_01.Axe(4)	= Vtl.Axe4
			if vtl.mt<0
				vtl.mt=abs(vtl.mt)
			endif
			CX_DEV_01.Mt		= Vtl.Mt
			CX_DEV_01.Sens		= Vtl.Sens
			CX_DEV_01.Jnl		= Vtl.Jnl
			CX_DEV_01.Ecrno	= Vtl.EcrNo
			CX_DEV_01.Ecrlg	= Vtl.EcrLg
			
			Cog_GenererLigne(t_ligne, t_SeparateurC, t_SeparateurL,true,"",CX_DEV_01, Condition(t_OA > 0, t_OA, 2))
			; 2 par défaut pour t_oA car à l'origine fonction prévue pour les ecr centrales

			if val(mid(t_ligne,124,16))	<> 0
				x_st_02 = FWritSt(TDF_01, Left(t_ligne))
			endif
	
		WEnd
	EndIf

	ListDestroy(list_EcrVtl)

	;*
	; Fermeture du fichier TXT
	;*
	HClose(TDF_01)
	;; Sauvegarde du fichier
	;x_st_01 = HCopyFile(TDF_01.Name, TDF_02.Name,,,,a_numfic)
	;If x_st_01 <> 0
	;	t_ligne = "  - ERREUR : la sauvegarde du fichier " & Left(t_NomFichier) & " a échouée. -  "
	;	G3_LOG_ANO(10013,Left(t_ligne),,,,,,,,"COG_FMSG.DHFI",,)
	;	Display Left(t_ligne)
	;EndIf
	
	CogRs_C8.FShare([MZ.Dos "COG_EXPORT_ANAEL"], 'L')

	FReturn(TDF_01.Name)

EndF

;*
;* Programme Principal
;*
MAIN
;
;Dossier = 0
	Display  "*************************************************************"
	Display  "*** U GIE IRIS - Exportation des ecritures comptables       ***"
	Display  "*************************************************************"
	Display  " " 

	PingLocal("COG_MZ_SAVE", MZ)
	PingLocal("COG_SOC_SAVE", SOC)
	PingLocal("COG_ETS_SAVE", ETS)
	
	If PingReceive("ZEchange",MZ) = 0
		; Initialisation des variables
		Seek_Soc(MZ.Dos)
		Seek_Ets(MZ.Etb)
		x_user = SYSTEM.User
	Else
		; Dossier
		Input "0 - Taper le code dossier de DIVALTO : " MZ.Dos
		GTFDOS_DEV_01.KEY = "A" & MZ.Dos
		x_st_00	= HRead(GTFDOS_DEV_01, SOC_DEV01)
		If x_st_00 <> 0 And SOC_DEV01.Dos <> MZ.Dos
			Input "ERREUR : Dossier invalide !" MZ.Dos
			ProgramExit
		Else
			Seek_Soc(MZ.Dos)
		EndIf
		; Etablissement
		Input "1 - Taper le code etablissement de DIVALTO : " MZ.Etb
		GTFDOS_DEV_01.KEY = "C" & MZ.Dos & MZ.Etb
		x_st_00	= HRead(GTFDOS_DEV_01, ETS_DEV01)
		If x_st_00 <> 0 And ETS_DEV01.Dos <> MZ.Dos And ETS_DEV01.Etb <> MZ.Etb
			Input "ERREUR : Etablissement invalide !" MZ.Etb
			ProgramExit
		Else
			Seek_Ets(MZ.Etb)
		EndIf
	EndIf
		
	Display  " " 
	; Début de l'importation
	Display  "*************************************************************"
	Display  "*** Début de l exportation des ecritures comptables       ***"
	d_datetrait = Time(7)																															 
	s_datetrait = Mid(d_datetrait,7,2) & "/" & Mid(d_datetrait,5,2) & "/" & Mid(d_datetrait,1,4) & "-" & Mid(d_datetrait,9,2) & ":" &	Mid(d_datetrait,11,2) & ":" & Mid(d_datetrait,13,2)
	s_datetrait = Fstring("0", s_datetrait)
	Display  s_datetrait
	G3_LOG_ANO(10011,s_datetrait,,,,,,,,"COG_FMSG.DHFI",,)
	;
	COGF_ExportationEcritures(COGF_CheminImplicites("COMPTA"), MZ.Dos, 1, " ", " ", ";", " " & Chr(13) & Chr(10))
	;
	d_datetrait = Time(7)																															 
	s_datetrait = Mid(d_datetrait,7,2) & "/" & Mid(d_datetrait,5,2) & "/" & Mid(d_datetrait,1,4) & "-" & Mid(d_datetrait,9,2) & ":" &	Mid(d_datetrait,11,2) & ":" & Mid(d_datetrait,13,2)
	s_datetrait = Fstring("0", s_datetrait)
	G3_LOG_ANO(10012,s_datetrait,,,,,,,,"COG_FMSG.DHFI",,)
	Display  "*** Fin                                                   ***"
	Display  s_datetrait
	Display  "*************************************************************"
	Display  " " 
	
	; Restauration de l'environnement d'appel
	PingLocalReceiveAndDelete("COG_MZ_SAVE", MZ)
	PingLocalReceiveAndDelete("COG_SOC_SAVE", SOC)
	PingLocalReceiveAndDelete("COG_ETS_SAVE", ETS)
	
	; Fin 
	Display "Fin du programme."
	Display  " "
	
	ProgramExit
