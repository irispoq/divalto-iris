;>xdiva
;*
;*		Objet : Export des redditions - Programme Cogpp_ecr_facpv_red_exp.dhsp 
;*

;*
;*		Log	Version		N° modif		Date			Modifications
;*		--------------------------------------------------------------------------------------------------------------
;*		ROBL	kit104				01		07/2011		Version Initiale
;*

;*
;*		Procédures / Fonctions				Commentaires
;*		--------------------------------------------------------------------------------------------------------------
;*		InitialiserVariables					Initialisation des variables
;*		Cog_ExporterReddition			
;*		SaisiePage1								Saisie de la première page du masque
;*


include	gttcz00.dhsp						;déclarations communes

module	Cogtm_000.dhop						;module de fonctions communes
module	ccpmfic.dhop
module	yoffice.dhop
module	a5tm000.dhop
module	a5pmwin.dhop
module	cogtm_red.dhop

public hfile	cogfdd.dhsd	cog_freddition	cog_freddition	openonuse

public record	cogfdd.dhsd	Cog_red_param
public record	cogfdd.dhsd	Cog_red_ent
public record	cogfdd.dhsd	Cog_red_lig

public record	gtfdd.dhsd	cli
public record	gtfdd.dhsd	ent
public record	gtfdd.dhsd	xq			xq_cog		;enregistrement de travail

public record	ccfdd.dhsd	ca
public record	ccfdd.dhsd	c4

public record	a5dd.dhsd	mchemin


1  id_toolbar	L						;ident barre d'outils
1  id_menu		L						;ident menu

1	AdrProc		16						;adresse des procédures appelées dans le module associé
1	erreur		x		= false		;détermine s'il y a eu des erreurs lors de l'exécution du programme

1	tunnel		1,0	= false

;description des colonnes
const	col_dos			= 1	;n° de dossier
const	col_rno			= 2	;n° de reddition
const	col_rlg			= 3	;n° de ligne de reddition
const	col_grp			= 4	;code centrale
const	col_tie			= 5	;code tiers
const	col_nom			= 6	;nom du client
const	col_ad1			= 7	;adresse 1
const col_ad2			= 8	;adresse 2
const	col_rue			= 9	;rue
const	col_loc			= 10	;localité
const	col_cpo			= 11	;code postal
const	col_vil			= 12	;ville
const	col_fno			= 13	;n° de facture
const	col_fdt			= 14	;date de facture
const	col_ech			= 15	;échéance
const	col_ref			= 16	;référence produit
const	col_des			= 17	;désignation du produit
const	col_mht			= 18	;montant hors taxes
const	col_tva			= 19	;montant de TVA
const	col_ttc			= 20	;montant TTC


;*
;	Procédures / Fonctions générale
;*

;* Initialisation des variables
function int Cog_InitialiserVariables
hfile		a5dd.dhsd	a5fdos	a5fdos_loc		openonuse	;Fichier des dossiers et utilisateurs
record	a5dd.dhsd	muser		muser_loc						;Utilisateurs

beginf

	if pingreceive("zechange",mz) <> 0

		;le programme n'a pas été lancé à partir du menu, on recherche l'utilisateur
		if iseek(a5fdos_loc,muser_loc,"B",system.user)

			if not tunnel
				messagebox("Utilisateur "&left(system.user)&" non défini dans la base Divalto","Alerte",mb_iconexclamation)
			endif
			freturn(false)

		else

			mz.dos		= muser_loc.dos
			mz.etb		= muser_loc.etb
			mz.depo		= muser_loc.depo
			mz.mecle		= "Cogee_ecr_facpv_red_exp.dhof"
			mz.mtcle		= "Cogtt_ecr_facpv_red_exp.dhop"
			mz.titre2	= "Export de la Reddition"

		endif

	endif

	;commentaire du programme
	ProgramSetComment("Export de la Reddition")

	;recherche du dossier et T000
	seek_soc(mz.dos)
	Seek_CA(mz.Dos)

	if ca.Cog_Exp_Ch = "" or Seek_C4(ca.Cog_ExpPV_Jnl)
		if not tunnel
			messagebox("Dossier ou journal mal paramétré pour l'export vers Anaël","Erreur",mb_iconstop)
		endif
		Cog_EcritureLivreDeBord("Dossier ou journal mal paramétré pour l'export vers Anaël",applic="DCPT")
		freturn(false)
	endif

	if hseek(cog_freddition,Cog_red_param,"P"&mz.Dos) or Cog_red_param.Cog_RedCh = ""
		if not tunnel
			messagebox("Paramètres Reddition inaccessibles","Erreur",mb_iconstop)
		endif
		Cog_EcritureLivreDeBord("Paramètres Reddition inaccessibles",applic="DCPT")
		freturn(false)
	endif

	;chargement du masque écran
	xmeload mz.mecle
	xmetitle(mz.titre2)
	windowshow(sw_maximize)

	;chargement des barres d'outils
	id_toolbar = XmeToolbarGetId (mz.mecle,"MAIN")
	XmeToolbarSetWindow (id_toolbar,mz.mecle,1)

	;chargement du menu
	id_menu = XmeMenuGetId (mz.mecle,"MAIN")
	XmeMenuSetWindow (id_menu,mz.mecle,1)

	freturn(true)

endf

;*
procedure Cog_FinProgramme
beginp

	Cog_EcritureLivreDeBord("<-- Export de la Reddition",applic="DCPT")
	programexit

endp

;*
procedure Cog_AfficherTraitement
beginp

	;test d'abandon du programme en cours de traitement
	if getchar()=$E8 and messagebox("Abandon du traitement en cours ?","Confirmation",mb_iconquestion+mb_yesno)=idyes
		Cog_EcritureLivreDeBord("Abandon utilisateur",applic="DCPT")
		Cog_FinProgramme
	endif

	xmedispv mz.mecle 3 xme_mode_gosub
	xmeret
	xmedispv mz.mecle 4 xme_mode_gosub
	xmeret

endp

;*
function int Cog_FiltresOk
beginf

	if Cog_red_lig.Tiers not in(xq_cog.TiersD..xq_cog.TiersF) or G3_Masquage(Cog_red_lig.Tiers,xq_cog.TiersMsk) <> 0
		freturn(false)
	endif

	freturn(true)

endf


;*
;	Traitements
;*

;*
procedure Cog_ExporterReddition
1	fic							L
1	nomrep						256
1	nomp							256
1	nomfic						256

1	feuille						64
1	lig							6,0

1	ref		>	cogfdd.dhsd	ref
1	htmt		>	cogfdd.dhsd	htmt
1	tvamt		>	cogfdd.dhsd	tvamt
1	ttcmt		>	cogfdd.dhsd	ttcmt
1	htmtg		>	cogfdd.dhsd	htmt
1	tvamtg	>	cogfdd.dhsd	tvamt
1	ttcmtg	>	cogfdd.dhsd	ttcmt

1	svcle							S

beginp

	Rechercher_Chemin (mz.Dos, mz.Etb, Cog_red_param.Cog_RedCh)
	nomrep	= condition(mchemin.CheminTyp<3,Win_ConvertirEnNomWindows(mChemin.Chemin),mchemin.Chemin)
	nomp		= Win_Chemin(nomrep,"UGIEIRIS-DIVALTO-Reddition.xls")
	if (fic := WinCreateFile(nomp,generic_read,0,0,open_existing,file_attribute_normal,0)) = -1	;le fichier maître n'existe pas
		if not tunnel
			messagebox("Fichier Excel de référence "&nomp&&" introuvable","Erreur",mb_iconstop)
		endif
		Cog_EcritureLivreDeBord("Fichier Excel de référence "&nomp&&" introuvable",applic="DCPT")
		preturn
	endif
	winclosehandle(fic)

	if Office_Begin
		if not tunnel
			messagebox("Impossible d'accéder aux modules Office","Erreur",mb_iconstop)
		endif
		Cog_EcritureLivreDeBord("Impossible d'accéder aux modules Office",applic="DCPT")
		preturn
	endif

	Cog_EcritureLivreDeBord("--> Export de la Reddition",applic="DCPT")

	;affichage de la page de traitement
	xmedispv mz.mecle 2 2

	xq_cog.Lib(1)	= "Export de la Reddition"
	Cog_AfficherTraitement

	cog_freddition.Key	= "E" & mz.Dos & xq_cog.PiNoD
	loop not hread(cog_freddition,Cog_red_ent) and cog_freddition.Key <= "E" & mz.Dos & xq_cog.PiNoF & $FF

		svcle	= isavekey(cog_freddition)
		
		if Cog_FiltresOk

			nomfic	= Win_Chemin(nomrep,"reddition_"&right(Cog_red_ent.Cog_RedNo)&"_"&Cog_red_ent.TiersGrp&&".xls")
			nomfic	= modify("/","\",nomfic)
			if (fic := WinCreateFile(nomfic,generic_read,0,0,open_existing,file_attribute_normal,0)) = -1	;le fichier n'existe pas

				if wincopyfile(nomp,nomfic,true)

					if Office_Open(nomrep,"reddition_"&right(Cog_red_ent.Cog_RedNo)&"_"&Cog_red_ent.TiersGrp&&".xls",,0)
						Cog_EcritureLivreDeBord("Impossible d'ouvrir le classeur Excel pour la reddition n° "&right(Cog_red_ent.Cog_RedNo),applic="DCPT")
						erreur	= true
					else

						Office_Write(1,1,"Détail de la reddition n° "&right(Cog_red_ent.Cog_RedNo)&" pour la centrale "&Cog_red_ent.TiersGrp \
														&" entre le "&sdate(Cog_red_ent.Cog_PerDDt)&" et le "&sdate(Cog_red_ent.Cog_PerFDt))

						lig						= 4
						ref						= ""
						htmtg						= 0
						tvamtg					= 0
						ttcmtg					= 0
						cog_freddition.Key	= "M" & mz.Dos & Cog_red_ent.Cog_RedNo
						loop not hread(cog_freddition,Cog_red_lig) and cog_freddition.Key <= "M" & mz.Dos & Cog_red_ent.Cog_RedNo & $FF

							if ref <> Cog_red_lig.Ref
								if ref <> ""
									Office_FontBold(lig,col_ref,true)
									Office_Write(lig,col_ref,"Total "&Ref)
									Office_FontBold(lig,col_mht,true)
									Office_Write(lig,col_mht,HtMt)
									Office_FontBold(lig,col_tva,true)
									Office_Write(lig,col_tva,TvaMt)
									Office_FontBold(lig,col_ttc,true)
									Office_Write(lig,col_ttc,TtcMt)
									lig++
								endif
								htmt	= 0
								tvamt	= 0
								ttcmt	= 0
								ref	= Cog_red_lig.Ref
							endif

							Office_Write(lig,col_dos,Cog_red_lig.Dos)
							Office_Write(lig,col_rno,Cog_red_lig.Cog_RedNo)
							Office_Write(lig,col_rlg,Cog_red_lig.Cog_RedNoLg)
							Office_Write(lig,col_grp,Cog_red_lig.TiersGrp)
							Office_Write(lig,col_tie,Cog_red_lig.Tiers)
							Office_Write(lig,col_nom,Cog_red_lig.Nom)
							Office_Write(lig,col_ad1,Cog_red_lig.AdrCpl1)
							Office_Write(lig,col_ad2,Cog_red_lig.AdrCpl2)
							Office_Write(lig,col_rue,Cog_red_lig.Rue)
							Office_Write(lig,col_loc,Cog_red_lig.Loc)
							Office_Write(lig,col_cpo,Cog_red_lig.Cpostal)
							Office_Write(lig,col_vil,Cog_red_lig.Vil)
							Office_Write(lig,col_fno,Cog_red_lig.PiNo)
							Office_Write(lig,col_fdt,Cog_red_lig.PiDt)
							Office_Write(lig,col_ech,Cog_red_lig.EchDt)
							Office_Write(lig,col_ref,Cog_red_lig.Ref)
							Office_Write(lig,col_des,Cog_red_lig.Des)
							Office_Write(lig,col_mht,Cog_red_lig.HtMt)
							Office_Write(lig,col_tva,Cog_red_lig.TvaMt)
							Office_Write(lig,col_ttc,Cog_red_lig.TtcMt)

							htmt		+= Cog_red_lig.HtMt
							tvamt		+= Cog_red_lig.TvaMt
							ttcmt		+= Cog_red_lig.TtcMt
							htmtg		+= Cog_red_lig.HtMt
							tvamtg	+= Cog_red_lig.TvaMt
							ttcmtg	+= Cog_red_lig.TtcMt

							lig++
		
						endloop

						;dernière rupture
						if ref <> ""
							Office_FontBold(lig,col_ref,true)
							Office_Write(lig,col_ref,"Total "&Ref)
							Office_FontBold(lig,col_mht,true)
							Office_Write(lig,col_mht,HtMt)
							Office_FontBold(lig,col_tva,true)
							Office_Write(lig,col_tva,TvaMt)
							Office_FontBold(lig,col_ttc,true)
							Office_Write(lig,col_ttc,TtcMt)
							lig++
							Office_FontBold(lig,col_ref,true)
							Office_Write(lig,col_ref,"Total Général")
							Office_FontBold(lig,col_mht,true)
							Office_Write(lig,col_mht,HtMtg)
							Office_FontBold(lig,col_tva,true)
							Office_Write(lig,col_tva,TvaMtg)
							Office_FontBold(lig,col_ttc,true)
							Office_Write(lig,col_ttc,TtcMtg)
						endif

						Office_Close(true)

						Cog_MajFichierJoint(cog_red_ent.Cog_RedNo,nomfic,"Export Reddition n°"&cog_red_ent.Cog_RedNo,2)

					endif

				else
					Cog_EcritureLivreDeBord("Impossible de générer le fichier Excel pour la reddition n° "&right(Cog_red_ent.Cog_RedNo),applic="DCPT")
					erreur	= true
				endif

			else
				winclosehandle(fic)
			endif

		endif

		irestorekey(cog_freddition,svcle)

	endloop

	xmeret

	Office_Quit
	Office_End
	
	Cog_EcritureLivreDeBord("<-- Export de la Reddition",applic="DCPT")

endp


;*
;	Saisie des pages du masque
;*

;* Saisie du masque page 1
public procedure Cog_SaisiePage1
1 fin		1,0	= 0

beginp

	xmeinput(mz.mecle,1,0,xme_mode_goto)

	do
	                                
		switch harmony.key            ;tests des causes de l'interruption
	
			case harmony.dataarret = 8002
				if Harmony.Sourisbout = Right_Button
					Zoom_Call()
				elsif Harmony.Sourisclic = Double_Click
					Harmony.Retour = Xmenext_Simulation_Touche
					Harmony.Cplretour = k_f8
				endif
			
			case k_f7                ;zoom généralisé
				Zoom_Call()
			
			case k_f8                ;zooms
				Zoom_Call(harmony.arret)
		
			case k_f9                ;abandon
				fin = 1
		
			case vsw in (k_f10,k_tab,k_return,k_down)
				if messagebox("Export de la Reddition ?","Confirmation",mb_yesno+mb_iconquestion)=idyes
					
					Cog_ExporterReddition
		
					if erreur
						messagebox("Des erreurs ont été détectées.|Consultez le livre de bord","Alerte",mb_iconexclamation)
					endif
		
					fin=1
		
				endif

		endswitch

	while fin = 0         ;suite de la saisie
		xmenext(harmony.retour,harmony.cplretour)
	wend
		
endp


;*
;	Programme principal
;*
main
	
	if pingreceive("xq_cog",xq_cog) = 0
		tunnel	= true
	endif

	if Cog_InitialiserVariables

		if not tunnel
	
			GetAdressProcedure(mz.MtCle,"ChargementAvant",AdrProc)
			procedurecall(AdrProc)
			Cog_SaisiePage1
	
		else	;programme piloté
	
			Cog_ExporterReddition
	
		endif

	endif
